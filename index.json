{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Parcel Packet Manager | Parcel",
    "keywords": "Parcel Packet Manager"
  },
  "api/Parcel.ConnectionToken.Address.html": {
    "href": "api/Parcel.ConnectionToken.Address.html",
    "title": "Property Address | Parcel",
    "keywords": "Property Address | Improve this Doc View Source Address The address of the connection. Declaration public string Address { get; } Property Value Type Description System.String"
  },
  "api/Parcel.ConnectionToken.-ctor.html": {
    "href": "api/Parcel.ConnectionToken.-ctor.html",
    "title": "Constructor ConnectionToken | Parcel",
    "keywords": "Constructor ConnectionToken | Improve this Doc View Source ConnectionToken(String) Construct a new instance of ConnectionToken. Declaration public ConnectionToken(string address) Parameters Type Name Description System.String address The address to use. | Improve this Doc View Source ConnectionToken(String, Int32) Construct a new instance of ConnectionToken. Declaration public ConnectionToken(string address, int port) Parameters Type Name Description System.String address The address to use. System.Int32 port The port to use."
  },
  "api/Parcel.ConnectionToken.Equals.html": {
    "href": "api/Parcel.ConnectionToken.Equals.html",
    "title": "Method Equals | Parcel",
    "keywords": "Method Equals | Improve this Doc View Source Equals(ConnectionToken) Declaration public bool Equals(ConnectionToken other) Parameters Type Name Description ConnectionToken other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean"
  },
  "api/Parcel.ConnectionToken.GetHashCode.html": {
    "href": "api/Parcel.ConnectionToken.GetHashCode.html",
    "title": "Method GetHashCode | Parcel",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/Parcel.ConnectionToken.html": {
    "href": "api/Parcel.ConnectionToken.html",
    "title": "Class ConnectionToken | Parcel",
    "keywords": "Class ConnectionToken Represents a token used for establishing connections. Inheritance System.Object ConnectionToken Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class ConnectionToken : IEquatable<ConnectionToken> Remarks The value set for the Address parameter will be dependent upon which Network Adapter you have chosen to use. Constructors Name Description ConnectionToken(String) Construct a new instance of ConnectionToken. ConnectionToken(String, Int32) Construct a new instance of ConnectionToken. Properties Name Description Address The address of the connection. Port The port of the connection. Methods Name Description Equals(ConnectionToken) Equals(Object) GetHashCode() ToString() Operators Name Description Equality(ConnectionToken, ConnectionToken) Inequality(ConnectionToken, ConnectionToken)"
  },
  "api/Parcel.ConnectionToken.op_Equality.html": {
    "href": "api/Parcel.ConnectionToken.op_Equality.html",
    "title": "Operator Equality | Parcel",
    "keywords": "Operator Equality | Improve this Doc View Source Equality(ConnectionToken, ConnectionToken) Declaration public static bool operator ==(ConnectionToken left, ConnectionToken right) Parameters Type Name Description ConnectionToken left ConnectionToken right Returns Type Description System.Boolean"
  },
  "api/Parcel.ConnectionToken.op_Inequality.html": {
    "href": "api/Parcel.ConnectionToken.op_Inequality.html",
    "title": "Operator Inequality | Parcel",
    "keywords": "Operator Inequality | Improve this Doc View Source Inequality(ConnectionToken, ConnectionToken) Declaration public static bool operator !=(ConnectionToken left, ConnectionToken right) Parameters Type Name Description ConnectionToken left ConnectionToken right Returns Type Description System.Boolean"
  },
  "api/Parcel.ConnectionToken.Port.html": {
    "href": "api/Parcel.ConnectionToken.Port.html",
    "title": "Property Port | Parcel",
    "keywords": "Property Port | Improve this Doc View Source Port The port of the connection. Declaration public int Port { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.ConnectionToken.ToString.html": {
    "href": "api/Parcel.ConnectionToken.ToString.html",
    "title": "Method ToString | Parcel",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Parcel.Debug.FileLogger.-ctor.html": {
    "href": "api/Parcel.Debug.FileLogger.-ctor.html",
    "title": "Constructor FileLogger | Parcel",
    "keywords": "Constructor FileLogger | Improve this Doc View Source FileLogger(String, Boolean, Boolean, Boolean) Construct a new instance of FileLogger. Declaration public FileLogger(string filePath, bool writeMessages = true, bool writeWarnings = true, bool writeErrors = true) Parameters Type Name Description System.String filePath The path to the file to log to. System.Boolean writeMessages Should this Logger write messages. System.Boolean writeWarnings Should this Logger write warnings. System.Boolean writeErrors Should this logger write errors."
  },
  "api/Parcel.Debug.FileLogger.Dispose.html": {
    "href": "api/Parcel.Debug.FileLogger.Dispose.html",
    "title": "Method Dispose | Parcel",
    "keywords": "Method Dispose | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/Parcel.Debug.FileLogger.html": {
    "href": "api/Parcel.Debug.FileLogger.html",
    "title": "Class FileLogger | Parcel",
    "keywords": "Class FileLogger Writes Logger messages to a file. Inheritance System.Object Logger FileLogger Implements IDisposable Inherited Members Logger.WriteMessages Logger.WriteWarnings Logger.WriteErrors Namespace : Parcel.Debug Assembly : ParcelPacketManager.dll Syntax public sealed class FileLogger : Logger Constructors Name Description FileLogger(String, Boolean, Boolean, Boolean) Construct a new instance of FileLogger. Methods Name Description Dispose() Write(String, Severity) Write to the Logger. WriteLine(String, Severity) Write to the Logger ending with a new line character."
  },
  "api/Parcel.Debug.FileLogger.Write.html": {
    "href": "api/Parcel.Debug.FileLogger.Write.html",
    "title": "Method Write | Parcel",
    "keywords": "Method Write | Improve this Doc View Source Write(String, Severity) Write to the Logger. Declaration public override void Write(string message, Severity severity) Parameters Type Name Description System.String message The message. Severity severity The severity of the message. Overrides Logger.Write(String, Severity)"
  },
  "api/Parcel.Debug.FileLogger.WriteLine.html": {
    "href": "api/Parcel.Debug.FileLogger.WriteLine.html",
    "title": "Method WriteLine | Parcel",
    "keywords": "Method WriteLine | Improve this Doc View Source WriteLine(String, Severity) Write to the Logger ending with a new line character. Declaration public override void WriteLine(string message, Severity severity) Parameters Type Name Description System.String message The message. Severity severity The severity of the message. Overrides Logger.WriteLine(String, Severity)"
  },
  "api/Parcel.Debug.html": {
    "href": "api/Parcel.Debug.html",
    "title": "Namespace Parcel.Debug | Parcel",
    "keywords": "Namespace Parcel.Debug Classes FileLogger Writes Logger messages to a file. Logger Defines implementation contract for all Loggers. NetworkDebugger Attaches to a ParcelClient or ParcelServer instance and tracks network statistics. Enums Severity The severity of a Logger message."
  },
  "api/Parcel.Debug.Logger.html": {
    "href": "api/Parcel.Debug.Logger.html",
    "title": "Class Logger | Parcel",
    "keywords": "Class Logger Defines implementation contract for all Loggers. Inheritance System.Object Logger FileLogger Namespace : Parcel.Debug Assembly : ParcelPacketManager.dll Syntax public abstract class Logger : object Properties Name Description WriteErrors Should this Logger write errors. WriteMessages Should this Logger write messages. WriteWarnings Should this Logger write warnings. Methods Name Description Write(String, Severity) Write to the Logger. WriteLine(String, Severity) Write to the Logger ending with a new line character."
  },
  "api/Parcel.Debug.Logger.Write.html": {
    "href": "api/Parcel.Debug.Logger.Write.html",
    "title": "Method Write | Parcel",
    "keywords": "Method Write | Improve this Doc View Source Write(String, Severity) Write to the Logger. Declaration public abstract void Write(string message, Severity severity) Parameters Type Name Description System.String message The message. Severity severity The severity of the message."
  },
  "api/Parcel.Debug.Logger.WriteErrors.html": {
    "href": "api/Parcel.Debug.Logger.WriteErrors.html",
    "title": "Property WriteErrors | Parcel",
    "keywords": "Property WriteErrors | Improve this Doc View Source WriteErrors Should this Logger write errors. Declaration public bool WriteErrors { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Debug.Logger.WriteLine.html": {
    "href": "api/Parcel.Debug.Logger.WriteLine.html",
    "title": "Method WriteLine | Parcel",
    "keywords": "Method WriteLine | Improve this Doc View Source WriteLine(String, Severity) Write to the Logger ending with a new line character. Declaration public abstract void WriteLine(string message, Severity severity) Parameters Type Name Description System.String message The message. Severity severity The severity of the message."
  },
  "api/Parcel.Debug.Logger.WriteMessages.html": {
    "href": "api/Parcel.Debug.Logger.WriteMessages.html",
    "title": "Property WriteMessages | Parcel",
    "keywords": "Property WriteMessages | Improve this Doc View Source WriteMessages Should this Logger write messages. Declaration public bool WriteMessages { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Debug.Logger.WriteWarnings.html": {
    "href": "api/Parcel.Debug.Logger.WriteWarnings.html",
    "title": "Property WriteWarnings | Parcel",
    "keywords": "Property WriteWarnings | Improve this Doc View Source WriteWarnings Should this Logger write warnings. Declaration public bool WriteWarnings { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Debug.NetworkDebugger.AddConnectionEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddConnectionEvent.html",
    "title": "Method AddConnectionEvent | Parcel",
    "keywords": "Method AddConnectionEvent | Improve this Doc View Source AddConnectionEvent(Boolean, ConnectionToken) Add an event indicating a connection to a remote user. Declaration public void AddConnectionEvent(bool success, ConnectionToken remoteToken) Parameters Type Name Description System.Boolean success The success status of the event. ConnectionToken remoteToken The ConnectionToken of the remote user."
  },
  "api/Parcel.Debug.NetworkDebugger.AddDeserializedPacketEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddDeserializedPacketEvent.html",
    "title": "Method AddDeserializedPacketEvent | Parcel",
    "keywords": "Method AddDeserializedPacketEvent | Improve this Doc View Source AddDeserializedPacketEvent() Add an event indicating the deserialization of a packet was completed. Declaration public void AddDeserializedPacketEvent()"
  },
  "api/Parcel.Debug.NetworkDebugger.AddDisconnectionEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddDisconnectionEvent.html",
    "title": "Method AddDisconnectionEvent | Parcel",
    "keywords": "Method AddDisconnectionEvent | Improve this Doc View Source AddDisconnectionEvent() Add an event indicating a disconnection from a remote user. Declaration public void AddDisconnectionEvent()"
  },
  "api/Parcel.Debug.NetworkDebugger.AddExceptionEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddExceptionEvent.html",
    "title": "Method AddExceptionEvent | Parcel",
    "keywords": "Method AddExceptionEvent | Improve this Doc View Source AddExceptionEvent(Exception) Add an event indicating an Exception occured. Declaration public void AddExceptionEvent(Exception ex) Parameters Type Name Description Exception ex The exception Remarks When an Exception event occurs, if a Logger is attached to the NetworkDebugger instance, the Exception will be dumped to the log."
  },
  "api/Parcel.Debug.NetworkDebugger.AddPacketLostEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddPacketLostEvent.html",
    "title": "Method AddPacketLostEvent | Parcel",
    "keywords": "Method AddPacketLostEvent | Improve this Doc View Source AddPacketLostEvent(Int32) Add an event indicating one or more Packets were lost. Declaration public void AddPacketLostEvent(int lostCount) Parameters Type Name Description System.Int32 lostCount The number of Packets lost."
  },
  "api/Parcel.Debug.NetworkDebugger.AddPacketResentEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddPacketResentEvent.html",
    "title": "Method AddPacketResentEvent | Parcel",
    "keywords": "Method AddPacketResentEvent | Improve this Doc View Source AddPacketResentEvent(Int32) Add an event indicating a Packet was resent. Declaration public void AddPacketResentEvent(int sequenceNumber) Parameters Type Name Description System.Int32 sequenceNumber The sequence number of the Packet."
  },
  "api/Parcel.Debug.NetworkDebugger.AddReceivePacketEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddReceivePacketEvent.html",
    "title": "Method AddReceivePacketEvent | Parcel",
    "keywords": "Method AddReceivePacketEvent | Improve this Doc View Source AddReceivePacketEvent(Int32) Add an event indicating a Packet was received. Declaration public void AddReceivePacketEvent(int packetSize) Parameters Type Name Description System.Int32 packetSize The size in bytes of the Packet."
  },
  "api/Parcel.Debug.NetworkDebugger.AddSendPacketEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddSendPacketEvent.html",
    "title": "Method AddSendPacketEvent | Parcel",
    "keywords": "Method AddSendPacketEvent | Improve this Doc View Source AddSendPacketEvent(Int32) Add an event indicating a Packet was sent. Declaration public void AddSendPacketEvent(int packetSize) Parameters Type Name Description System.Int32 packetSize The size in bytes of the Packet."
  },
  "api/Parcel.Debug.NetworkDebugger.AddSerializedPacketEvent.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.AddSerializedPacketEvent.html",
    "title": "Method AddSerializedPacketEvent | Parcel",
    "keywords": "Method AddSerializedPacketEvent | Improve this Doc View Source AddSerializedPacketEvent() Add an event indicating the serialization of a packet was completed. Declaration public void AddSerializedPacketEvent()"
  },
  "api/Parcel.Debug.NetworkDebugger.-ctor.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.-ctor.html",
    "title": "Constructor NetworkDebugger | Parcel",
    "keywords": "Constructor NetworkDebugger | Improve this Doc View Source NetworkDebugger(Logger) Construct a new instance of NetworkDebugger. Declaration public NetworkDebugger(Logger logger = null) Parameters Type Name Description Logger logger Optionally attach a Logger that will log select events such as exceptions and the end of a frame."
  },
  "api/Parcel.Debug.NetworkDebugger.Dispose.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.Dispose.html",
    "title": "Method Dispose | Parcel",
    "keywords": "Method Dispose | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/Parcel.Debug.NetworkDebugger.EndFrame.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.EndFrame.html",
    "title": "Method EndFrame | Parcel",
    "keywords": "Method EndFrame | Improve this Doc View Source EndFrame() End the current Frame. Declaration public void EndFrame() Remarks When a Frame ends, if a Logger is attached to the NetworkDebugger instance, the Frame's statistics will be dumped to the log."
  },
  "api/Parcel.Debug.NetworkDebugger.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.html",
    "title": "Class NetworkDebugger | Parcel",
    "keywords": "Class NetworkDebugger Attaches to a ParcelClient or ParcelServer instance and tracks network statistics. Inheritance System.Object NetworkDebugger Namespace : Parcel.Debug Assembly : ParcelPacketManager.dll Syntax public class NetworkDebugger : IDisposable Constructors Name Description NetworkDebugger(Logger) Construct a new instance of NetworkDebugger. Methods Name Description AddConnectionEvent(Boolean, ConnectionToken) Add an event indicating a connection to a remote user. AddDeserializedPacketEvent() Add an event indicating the deserialization of a packet was completed. AddDisconnectionEvent() Add an event indicating a disconnection from a remote user. AddExceptionEvent(Exception) Add an event indicating an Exception occured. AddPacketLostEvent(Int32) Add an event indicating one or more Packets were lost. AddPacketResentEvent(Int32) Add an event indicating a Packet was resent. AddReceivePacketEvent(Int32) Add an event indicating a Packet was received. AddSendPacketEvent(Int32) Add an event indicating a Packet was sent. AddSerializedPacketEvent() Add an event indicating the serialization of a packet was completed. Dispose() EndFrame() End the current Frame. StartFrame(String) Start a new Frame. WriteMessage(String) Write a message to the Logger , if it exists."
  },
  "api/Parcel.Debug.NetworkDebugger.StartFrame.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.StartFrame.html",
    "title": "Method StartFrame | Parcel",
    "keywords": "Method StartFrame | Improve this Doc View Source StartFrame(String) Start a new Frame. Declaration public void StartFrame(string name) Parameters Type Name Description System.String name The name of the frame. Remarks Frames will track events that occur within them until EndFrame() is called."
  },
  "api/Parcel.Debug.NetworkDebugger.WriteMessage.html": {
    "href": "api/Parcel.Debug.NetworkDebugger.WriteMessage.html",
    "title": "Method WriteMessage | Parcel",
    "keywords": "Method WriteMessage | Improve this Doc View Source WriteMessage(String) Write a message to the Logger , if it exists. Declaration public void WriteMessage(string message) Parameters Type Name Description System.String message The message to write."
  },
  "api/Parcel.Debug.Severity.html": {
    "href": "api/Parcel.Debug.Severity.html",
    "title": "Enum Severity | Parcel",
    "keywords": "Enum Severity The severity of a Logger message. Namespace : Parcel.Debug Assembly : ParcelPacketManager.dll Syntax public enum Severity : int Fields Name Description Error Indicates an error. Message Indicates an ordinary message. Warning Indicates a warning."
  },
  "api/Parcel.html": {
    "href": "api/Parcel.html",
    "title": "Namespace Parcel | Parcel",
    "keywords": "Namespace Parcel Classes ConnectionToken Represents a token used for establishing connections. ParcelClient Provides client-side network services. ParcelServer Provides server-side network services. ParcelSettings Represents a collection of settings to be used by either a ParcelClient or ParcelServer . ParcelSettingsBuilder Facilitates construction of a new ParcelSettings instance. Peer Represents a local or remote user. PeerBuilder Facilitates construction of a new Peer instance. ReliableAttribute Specifies that a Packet or property within a SyncedObject is considered reliable. UnreliableAttribute Specifies that a Packet or property within a SyncedObject is considered unreliable. Enums ServerDisconnectionBehavior Represents the behavior for handling SyncedObjects a server should perform when a user disconnects."
  },
  "api/Parcel.Networking.ConnectionDelegate.html": {
    "href": "api/Parcel.Networking.ConnectionDelegate.html",
    "title": "Delegate ConnectionDelegate | Parcel",
    "keywords": "Delegate ConnectionDelegate A delegate defining the signature for connection events. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public delegate void ConnectionDelegate(Peer peer); Parameters Type Name Description Peer peer The Peer associated with the connection event."
  },
  "api/Parcel.Networking.ConnectionResult.-ctor.html": {
    "href": "api/Parcel.Networking.ConnectionResult.-ctor.html",
    "title": "Constructor ConnectionResult | Parcel",
    "keywords": "Constructor ConnectionResult | Improve this Doc View Source ConnectionResult(ConnectionStatus, Peer, Object) Construct a new ConnectionResult struct. Declaration public ConnectionResult(ConnectionStatus status, Peer remotePeer, object rejectionObject) Parameters Type Name Description ConnectionStatus status Whether the connection was successful or not. Peer remotePeer The remote Peer that the connection attempt was made with. System.Object rejectionObject The rejection object to include."
  },
  "api/Parcel.Networking.ConnectionResult.html": {
    "href": "api/Parcel.Networking.ConnectionResult.html",
    "title": "Struct ConnectionResult | Parcel",
    "keywords": "Struct ConnectionResult Represents the result of an attempt to connect to a remote user. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public struct ConnectionResult Constructors Name Description ConnectionResult(ConnectionStatus, Peer, Object) Construct a new ConnectionResult struct. Properties Name Description RejectionObject An object that can optionally be included with a rejection event. RemotePeer The remote Peer that the connection attempt was made with. Status The status of the connection attempt."
  },
  "api/Parcel.Networking.ConnectionResult.RejectionObject.html": {
    "href": "api/Parcel.Networking.ConnectionResult.RejectionObject.html",
    "title": "Property RejectionObject | Parcel",
    "keywords": "Property RejectionObject | Improve this Doc View Source RejectionObject An object that can optionally be included with a rejection event. Declaration public object RejectionObject { get; } Property Value Type Description System.Object"
  },
  "api/Parcel.Networking.ConnectionResult.RemotePeer.html": {
    "href": "api/Parcel.Networking.ConnectionResult.RemotePeer.html",
    "title": "Property RemotePeer | Parcel",
    "keywords": "Property RemotePeer | Improve this Doc View Source RemotePeer The remote Peer that the connection attempt was made with. Declaration public Peer RemotePeer { get; } Property Value Type Description Peer"
  },
  "api/Parcel.Networking.ConnectionResult.Status.html": {
    "href": "api/Parcel.Networking.ConnectionResult.Status.html",
    "title": "Property Status | Parcel",
    "keywords": "Property Status | Improve this Doc View Source Status The status of the connection attempt. Declaration public ConnectionStatus Status { get; } Property Value Type Description ConnectionStatus"
  },
  "api/Parcel.Networking.ConnectionStatus.html": {
    "href": "api/Parcel.Networking.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | Parcel",
    "keywords": "Enum ConnectionStatus Represents the status of a ConnectionResult object. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public enum ConnectionStatus : int Fields Name Description Error Indicates that a connection failed due to an error occurring. Rejected Indicates that a connection failed due to being rejected. Success Indicates that a connection succeeded. Timeout Indicates that the connection failed due to a time out."
  },
  "api/Parcel.Networking.DisconnectionDelegate.html": {
    "href": "api/Parcel.Networking.DisconnectionDelegate.html",
    "title": "Delegate DisconnectionDelegate | Parcel",
    "keywords": "Delegate DisconnectionDelegate A delegate defining the signature for disconnection events. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public delegate void DisconnectionDelegate(Peer peer, DisconnectionReason reason, object disconnectionObject); Parameters Type Name Description Peer peer The Peer associated with the connection event. DisconnectionReason reason The reason for the disconnection. System.Object disconnectionObject The object sent by the server."
  },
  "api/Parcel.Networking.DisconnectionReason.html": {
    "href": "api/Parcel.Networking.DisconnectionReason.html",
    "title": "Enum DisconnectionReason | Parcel",
    "keywords": "Enum DisconnectionReason Represents the reason for a disconnection. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public enum DisconnectionReason : int Fields Name Description Forced Indicates that the disconnection was forced. Manual Indicates that the disconnection was manual. Timeout Indicates that the disconnection was caused by a time out."
  },
  "api/Parcel.Networking.html": {
    "href": "api/Parcel.Networking.html",
    "title": "Namespace Parcel.Networking | Parcel",
    "keywords": "Namespace Parcel.Networking Classes UdpNetworkAdapter Network Adapter implementation using the UDP protocol. Structs ConnectionResult Represents the result of an attempt to connect to a remote user. InitialConnectionResult Represents the results of a InitialConnectionEvent. Interfaces INetworkAdapter Defines implementation contract for all Network Adapters. Enums ConnectionStatus Represents the status of a ConnectionResult object. DisconnectionReason Represents the reason for a disconnection. Reliability Represents the reliability of a Packet or SyncedObject property. Delegates ConnectionDelegate A delegate defining the signature for connection events. DisconnectionDelegate A delegate defining the signature for disconnection events. InitialConnectionDelegate A delegate defining the signature for initial connection events."
  },
  "api/Parcel.Networking.INetworkAdapter.ConnectTo.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.ConnectTo.html",
    "title": "Method ConnectTo | Parcel",
    "keywords": "Method ConnectTo | Improve this Doc View Source ConnectTo(ConnectionToken) Open a connection with a remote user. Declaration Task<ConnectionResult> ConnectTo(ConnectionToken connectionToken) Parameters Type Name Description ConnectionToken connectionToken The ConnectionToken used to open a connection to the remote user. Returns Type Description Task < ConnectionResult > A ConnectionResult struct containing the results of the connection."
  },
  "api/Parcel.Networking.INetworkAdapter.DisconnectFrom.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.DisconnectFrom.html",
    "title": "Method DisconnectFrom | Parcel",
    "keywords": "Method DisconnectFrom | Improve this Doc View Source DisconnectFrom(Peer, Object) Close a connection with a remote user. Declaration Task DisconnectFrom(Peer peer, object disconnectionObject = null) Parameters Type Name Description Peer peer The Peer to close the connection with. System.Object disconnectionObject The object to send to the disconnected Peer . Returns Type Description Task"
  },
  "api/Parcel.Networking.INetworkAdapter.GetNextPacket.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.GetNextPacket.html",
    "title": "Method GetNextPacket | Parcel",
    "keywords": "Method GetNextPacket | Improve this Doc View Source GetNextPacket(out ByteReader, out Peer) Get the next incoming packet. Declaration bool GetNextPacket(out ByteReader reader, out Peer sender) Parameters Type Name Description ByteReader reader A ByteReader containing the entirety of the packet, advanced to the start of the payload. Peer sender The Peer the packet came from. Returns Type Description System.Boolean true if a packet was found; otherwise, false ."
  },
  "api/Parcel.Networking.INetworkAdapter.GetPing.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.GetPing.html",
    "title": "Method GetPing | Parcel",
    "keywords": "Method GetPing | Improve this Doc View Source GetPing(Peer) Get the ping of a remote user. Declaration int GetPing(Peer peer) Parameters Type Name Description Peer peer The Peer to get the ping of. Returns Type Description System.Int32 The ping of the Peer ."
  },
  "api/Parcel.Networking.INetworkAdapter.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.html",
    "title": "Interface INetworkAdapter | Parcel",
    "keywords": "Interface INetworkAdapter Defines implementation contract for all Network Adapters. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public interface INetworkAdapter Remarks Network adapters are responsible for establishing connections and handling data transmission between Peers . When implementing a Network Adapter, it is essential to support reliable data transmission. Unreliable data transmission can be optionally implemented. Parcel comes with a few built in adapters: The UDP Network Adapter : Handles packets using the udp protocol. The Steam Adapter : Handles packets using the Steam API's networking solution. Methods Name Description ConnectTo(ConnectionToken) Open a connection with a remote user. DisconnectFrom(Peer, Object) Close a connection with a remote user. GetNextPacket(out ByteReader, out Peer) Get the next incoming packet. GetPing(Peer) Get the ping of a remote user. SendPacketTo(Peer, Reliability, ByteWriter) Send a packet to a remote user. Start(Boolean, ParcelSettings) Initiate the Network Adapter. Events Name Description OnConnection Event triggered when a Peer connects to the current device. OnDisconnection Event triggered when a Peer disconnects from the current device. OnInitialConnection Event triggered when a connection event is being processed."
  },
  "api/Parcel.Networking.INetworkAdapter.OnConnection.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.OnConnection.html",
    "title": "Event OnConnection | Parcel",
    "keywords": "Event OnConnection Event triggered when a Peer connects to the current device. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax event ConnectionDelegate OnConnection Returns Type Description ConnectionDelegate"
  },
  "api/Parcel.Networking.INetworkAdapter.OnDisconnection.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.OnDisconnection.html",
    "title": "Event OnDisconnection | Parcel",
    "keywords": "Event OnDisconnection Event triggered when a Peer disconnects from the current device. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax event DisconnectionDelegate OnDisconnection Returns Type Description DisconnectionDelegate"
  },
  "api/Parcel.Networking.INetworkAdapter.OnInitialConnection.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.OnInitialConnection.html",
    "title": "Event OnInitialConnection | Parcel",
    "keywords": "Event OnInitialConnection Event triggered when a connection event is being processed. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax event InitialConnectionDelegate OnInitialConnection Returns Type Description InitialConnectionDelegate"
  },
  "api/Parcel.Networking.INetworkAdapter.SendPacketTo.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.SendPacketTo.html",
    "title": "Method SendPacketTo | Parcel",
    "keywords": "Method SendPacketTo | Improve this Doc View Source SendPacketTo(Peer, Reliability, ByteWriter) Send a packet to a remote user. Declaration void SendPacketTo(Peer peer, Reliability reliability, ByteWriter writer) Parameters Type Name Description Peer peer The Peer to send the packet to. Reliability reliability The Reliability of the packet. ByteWriter writer A ByteWriter containing the packet payload."
  },
  "api/Parcel.Networking.INetworkAdapter.Start.html": {
    "href": "api/Parcel.Networking.INetworkAdapter.Start.html",
    "title": "Method Start | Parcel",
    "keywords": "Method Start | Improve this Doc View Source Start(Boolean, ParcelSettings) Initiate the Network Adapter. Declaration void Start(bool isServer, ParcelSettings settings) Parameters Type Name Description System.Boolean isServer Whether the network adapter is associated to a ParcelServer or ParcelClient instance. ParcelSettings settings The ParcelSettings instance used by the ParcelServer or ParcelClient that owns the network adapter."
  },
  "api/Parcel.Networking.InitialConnectionDelegate.html": {
    "href": "api/Parcel.Networking.InitialConnectionDelegate.html",
    "title": "Delegate InitialConnectionDelegate | Parcel",
    "keywords": "Delegate InitialConnectionDelegate A delegate defining the signature for initial connection events. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public delegate InitialConnectionResult InitialConnectionDelegate(Peer peer); Parameters Type Name Description Peer peer The Peer associated with the connection event. Returns Type Description InitialConnectionResult An InitialConnectionResult struct."
  },
  "api/Parcel.Networking.InitialConnectionResult.AllowConnection.html": {
    "href": "api/Parcel.Networking.InitialConnectionResult.AllowConnection.html",
    "title": "Property AllowConnection | Parcel",
    "keywords": "Property AllowConnection | Improve this Doc View Source AllowConnection Whether the connection is allowed or not. Declaration public bool AllowConnection { get; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Networking.InitialConnectionResult.-ctor.html": {
    "href": "api/Parcel.Networking.InitialConnectionResult.-ctor.html",
    "title": "Constructor InitialConnectionResult | Parcel",
    "keywords": "Constructor InitialConnectionResult | Improve this Doc View Source InitialConnectionResult(Boolean, String) Construct a new InitialConnectionResult struct. Declaration public InitialConnectionResult(bool allowConnection, string rejectionObject = null) Parameters Type Name Description System.Boolean allowConnection Whether the connection is allowed or not. System.String rejectionObject The rejection object to be sent to a client."
  },
  "api/Parcel.Networking.InitialConnectionResult.html": {
    "href": "api/Parcel.Networking.InitialConnectionResult.html",
    "title": "Struct InitialConnectionResult | Parcel",
    "keywords": "Struct InitialConnectionResult Represents the results of a InitialConnectionEvent. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public struct InitialConnectionResult Remarks Return this struct within a server's Before Connection Event to allow or reject a connection. Additionally a rejection object can included. Constructors Name Description InitialConnectionResult(Boolean, String) Construct a new InitialConnectionResult struct. Properties Name Description AllowConnection Whether the connection is allowed or not. RejectionObject The rejection object to be sent to a client."
  },
  "api/Parcel.Networking.InitialConnectionResult.RejectionObject.html": {
    "href": "api/Parcel.Networking.InitialConnectionResult.RejectionObject.html",
    "title": "Property RejectionObject | Parcel",
    "keywords": "Property RejectionObject | Improve this Doc View Source RejectionObject The rejection object to be sent to a client. Declaration public object RejectionObject { get; } Property Value Type Description System.Object"
  },
  "api/Parcel.Networking.Reliability.html": {
    "href": "api/Parcel.Networking.Reliability.html",
    "title": "Enum Reliability | Parcel",
    "keywords": "Enum Reliability Represents the reliability of a Packet or SyncedObject property. Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public enum Reliability : int Fields Name Description Reliable Indicates that a Packet or SyncedObject property is reliable. Unreliable Indicates that a Packet or SyncedObject property is unreliable."
  },
  "api/Parcel.Networking.UdpNetworkAdapter.ConnectTo.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.ConnectTo.html",
    "title": "Method ConnectTo | Parcel",
    "keywords": "Method ConnectTo | Improve this Doc View Source ConnectTo(ConnectionToken) Open a connection with a remote user. Declaration public async Task<ConnectionResult> ConnectTo(ConnectionToken connectionToken) Parameters Type Name Description ConnectionToken connectionToken The ConnectionToken used to open a connection to the remote user. Returns Type Description Task < ConnectionResult > A ConnectionResult struct containing the results of the connection. Implements INetworkAdapter.ConnectTo(ConnectionToken)"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.-ctor.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.-ctor.html",
    "title": "Constructor UdpNetworkAdapter | Parcel",
    "keywords": "Constructor UdpNetworkAdapter | Improve this Doc View Source UdpNetworkAdapter() Construct a new instance of UdpNetworkAdapter. Declaration public UdpNetworkAdapter()"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.DisconnectFrom.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.DisconnectFrom.html",
    "title": "Method DisconnectFrom | Parcel",
    "keywords": "Method DisconnectFrom | Improve this Doc View Source DisconnectFrom(Peer, Object) Close a connection with a remote user. Declaration public async Task DisconnectFrom(Peer peer, object disconnectionObject = null) Parameters Type Name Description Peer peer The Peer to close the connection with. System.Object disconnectionObject The object to send to the disconnected Peer . Returns Type Description Task Implements INetworkAdapter.DisconnectFrom(Peer, Object)"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.Dispose.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.Dispose.html",
    "title": "Method Dispose | Parcel",
    "keywords": "Method Dispose | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.GetNextPacket.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.GetNextPacket.html",
    "title": "Method GetNextPacket | Parcel",
    "keywords": "Method GetNextPacket | Improve this Doc View Source GetNextPacket(out ByteReader, out Peer) Get the next incoming packet. Declaration public bool GetNextPacket(out ByteReader reader, out Peer sender) Parameters Type Name Description ByteReader reader A ByteReader containing the entirety of the packet, advanced to the start of the payload. Peer sender The Peer the packet came from. Returns Type Description System.Boolean true if a packet was found; otherwise, false . Implements INetworkAdapter.GetNextPacket(out ByteReader, out Peer)"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.GetPing.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.GetPing.html",
    "title": "Method GetPing | Parcel",
    "keywords": "Method GetPing | Improve this Doc View Source GetPing(Peer) Get the ping of a remote user. Declaration public int GetPing(Peer peer) Parameters Type Name Description Peer peer The Peer to get the ping of. Returns Type Description System.Int32 The ping of the Peer . Implements INetworkAdapter.GetPing(Peer)"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.html",
    "title": "Class UdpNetworkAdapter | Parcel",
    "keywords": "Class UdpNetworkAdapter Network Adapter implementation using the UDP protocol. Inheritance System.Object UdpNetworkAdapter Implements INetworkAdapter IDisposable Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public sealed class UdpNetworkAdapter : object, INetworkAdapter Constructors Name Description UdpNetworkAdapter() Construct a new instance of UdpNetworkAdapter. Methods Name Description ConnectTo(ConnectionToken) Open a connection with a remote user. DisconnectFrom(Peer, Object) Close a connection with a remote user. Dispose() GetNextPacket(out ByteReader, out Peer) Get the next incoming packet. GetPing(Peer) Get the ping of a remote user. SendPacketTo(Peer, Reliability, ByteWriter) Send a packet to a remote user. Start(Boolean, ParcelSettings) Initiate the Network Adapter. Events Name Description OnConnection Event triggered when a Peer connects to the current device. OnDisconnection Event triggered when a Peer disconnects from the current device. OnInitialConnection Event triggered when a connection event is being processed."
  },
  "api/Parcel.Networking.UdpNetworkAdapter.OnConnection.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.OnConnection.html",
    "title": "Event OnConnection | Parcel",
    "keywords": "Event OnConnection Event triggered when a Peer connects to the current device. Implements OnConnection Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public event ConnectionDelegate OnConnection Returns Type Description ConnectionDelegate"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.OnDisconnection.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.OnDisconnection.html",
    "title": "Event OnDisconnection | Parcel",
    "keywords": "Event OnDisconnection Event triggered when a Peer disconnects from the current device. Implements OnDisconnection Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public event DisconnectionDelegate OnDisconnection Returns Type Description DisconnectionDelegate"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.OnInitialConnection.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.OnInitialConnection.html",
    "title": "Event OnInitialConnection | Parcel",
    "keywords": "Event OnInitialConnection Event triggered when a connection event is being processed. Implements OnInitialConnection Namespace : Parcel.Networking Assembly : ParcelPacketManager.dll Syntax public event InitialConnectionDelegate OnInitialConnection Returns Type Description InitialConnectionDelegate"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.SendPacketTo.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.SendPacketTo.html",
    "title": "Method SendPacketTo | Parcel",
    "keywords": "Method SendPacketTo | Improve this Doc View Source SendPacketTo(Peer, Reliability, ByteWriter) Send a packet to a remote user. Declaration public void SendPacketTo(Peer peer, Reliability reliability, ByteWriter writer) Parameters Type Name Description Peer peer The Peer to send the packet to. Reliability reliability The Reliability of the packet. ByteWriter writer A ByteWriter containing the packet payload. Implements INetworkAdapter.SendPacketTo(Peer, Reliability, ByteWriter)"
  },
  "api/Parcel.Networking.UdpNetworkAdapter.Start.html": {
    "href": "api/Parcel.Networking.UdpNetworkAdapter.Start.html",
    "title": "Method Start | Parcel",
    "keywords": "Method Start | Improve this Doc View Source Start(Boolean, ParcelSettings) Initiate the Network Adapter. Declaration public void Start(bool isServer, ParcelSettings settings) Parameters Type Name Description System.Boolean isServer Whether the network adapter is associated to a ParcelServer or ParcelClient instance. ParcelSettings settings The ParcelSettings instance used by the ParcelServer or ParcelClient that owns the network adapter. Implements INetworkAdapter.Start(Boolean, ParcelSettings)"
  },
  "api/Parcel.Packets.AlwaysSerializeAttribute.html": {
    "href": "api/Parcel.Packets.AlwaysSerializeAttribute.html",
    "title": "Class AlwaysSerializeAttribute | Parcel",
    "keywords": "Class AlwaysSerializeAttribute Specifies that a property within a SyncedObject should always be serialized when the object is serialized. Inheritance System.Object AlwaysSerializeAttribute Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public sealed class AlwaysSerializeAttribute : Attribute Remarks Under normal circumstances, a SyncedObject's properties will only serialize if they have changed. This attribute allows for a property to always be included in serialization, regardless of whether it changed or not."
  },
  "api/Parcel.Packets.ClientToServerPacket.CanSend.html": {
    "href": "api/Parcel.Packets.ClientToServerPacket.CanSend.html",
    "title": "Method CanSend | Parcel",
    "keywords": "Method CanSend | Improve this Doc View Source CanSend() Override this method to implement logic for determining if this Packet can be sent. Declaration protected override bool CanSend() Returns Type Description System.Boolean true if the packet should be sent; otherwise false . Overrides Packet.CanSend() Remarks This can be used to validate parameters before sending or any other logic."
  },
  "api/Parcel.Packets.ClientToServerPacket.html": {
    "href": "api/Parcel.Packets.ClientToServerPacket.html",
    "title": "Class ClientToServerPacket | Parcel",
    "keywords": "Class ClientToServerPacket Packet that can only travel from a ParcelClient to a ParcelServer . Inheritance System.Object Packet ClientToServerPacket Inherited Members Packet.Sender Packet.IsServer Packet.IsClient Packet.Client Packet.Server Packet.OnSend() Packet.OnReceive() Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public class ClientToServerPacket : Packet Methods Name Description CanSend() Override this method to implement logic for determining if this Packet can be sent."
  },
  "api/Parcel.Packets.DontPatchAttribute.html": {
    "href": "api/Parcel.Packets.DontPatchAttribute.html",
    "title": "Class DontPatchAttribute | Parcel",
    "keywords": "Class DontPatchAttribute Specifies that a property within a SyncedObject should not be patched when Parcel.Packets.SyncedObjectPatcher.Patch is called. Inheritance System.Object DontPatchAttribute Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public sealed class DontPatchAttribute : Attribute Remarks SyncedObject patching is a process that inserts a snippet of code to be called after the setter of each property in a SyncedObject. This allows for changes to the properties to be automatically tracked without implementation from the developer."
  },
  "api/Parcel.Packets.html": {
    "href": "api/Parcel.Packets.html",
    "title": "Namespace Parcel.Packets | Parcel",
    "keywords": "Namespace Parcel.Packets Classes AlwaysSerializeAttribute Specifies that a property within a SyncedObject should always be serialized when the object is serialized. ClientToServerPacket Packet that can only travel from a ParcelClient to a ParcelServer . DontPatchAttribute Specifies that a property within a SyncedObject should not be patched when Parcel.Packets.SyncedObjectPatcher.Patch is called. ObjectCacheExtensions Extension methods for ObjectCache . ObjectPropertiesExtensions Extension methods for ObjectProperty . Packet Base class for all Packets. ServerToClientPacket Packet that can only travel from a ParcelServer to a ParcelClient . SyncedObject Base class for SyncedObjects. Structs SyncedObject.PropertyChanges Represents changes made to a property. SyncedObjectID Represents an ID of a SyncedObject ."
  },
  "api/Parcel.Packets.ObjectCacheExtensions.GetReliability.html": {
    "href": "api/Parcel.Packets.ObjectCacheExtensions.GetReliability.html",
    "title": "Method GetReliability | Parcel",
    "keywords": "Method GetReliability | Improve this Doc View Source GetReliability(ObjectCache) Get the Reliability of a Packet . Declaration public static Reliability GetReliability(this ObjectCache objectCache) Parameters Type Name Description ObjectCache objectCache The ObjectCache of the Packet . Returns Type Description Reliability The Reliability of the Packet ."
  },
  "api/Parcel.Packets.ObjectCacheExtensions.html": {
    "href": "api/Parcel.Packets.ObjectCacheExtensions.html",
    "title": "Class ObjectCacheExtensions | Parcel",
    "keywords": "Class ObjectCacheExtensions Extension methods for ObjectCache . Inheritance System.Object ObjectCacheExtensions Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public static class ObjectCacheExtensions : object Methods Name Description GetReliability(ObjectCache) Get the Reliability of a Packet ."
  },
  "api/Parcel.Packets.ObjectPropertiesExtensions.GetReliability.html": {
    "href": "api/Parcel.Packets.ObjectPropertiesExtensions.GetReliability.html",
    "title": "Method GetReliability | Parcel",
    "keywords": "Method GetReliability | Improve this Doc View Source GetReliability(ObjectProperty) Get the Reliability of a Property. Declaration public static Reliability GetReliability(this ObjectProperty objectProperty) Parameters Type Name Description ObjectProperty objectProperty The Property of the SyncedObject . Returns Type Description Reliability The Reliability of the Property."
  },
  "api/Parcel.Packets.ObjectPropertiesExtensions.html": {
    "href": "api/Parcel.Packets.ObjectPropertiesExtensions.html",
    "title": "Class ObjectPropertiesExtensions | Parcel",
    "keywords": "Class ObjectPropertiesExtensions Extension methods for ObjectProperty . Inheritance System.Object ObjectPropertiesExtensions Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public static class ObjectPropertiesExtensions : object Methods Name Description GetReliability(ObjectProperty) Get the Reliability of a Property. WillAlwaysSerialize(ObjectProperty) Get whether a Property will Always Serialize"
  },
  "api/Parcel.Packets.ObjectPropertiesExtensions.WillAlwaysSerialize.html": {
    "href": "api/Parcel.Packets.ObjectPropertiesExtensions.WillAlwaysSerialize.html",
    "title": "Method WillAlwaysSerialize | Parcel",
    "keywords": "Method WillAlwaysSerialize | Improve this Doc View Source WillAlwaysSerialize(ObjectProperty) Get whether a Property will Always Serialize Declaration public static bool WillAlwaysSerialize(this ObjectProperty objectProperty) Parameters Type Name Description ObjectProperty objectProperty The Property of the SyncedObject . Returns Type Description System.Boolean true if the Property has the AlwaysSerializeAttribute ; otherwise, false ."
  },
  "api/Parcel.Packets.Packet.CanSend.html": {
    "href": "api/Parcel.Packets.Packet.CanSend.html",
    "title": "Method CanSend | Parcel",
    "keywords": "Method CanSend | Improve this Doc View Source CanSend() Override this method to implement logic for determining if this Packet can be sent. Declaration protected virtual bool CanSend() Returns Type Description System.Boolean true if the packet should be sent; otherwise false . Remarks This can be used to validate parameters before sending or any other logic."
  },
  "api/Parcel.Packets.Packet.Client.html": {
    "href": "api/Parcel.Packets.Packet.Client.html",
    "title": "Property Client | Parcel",
    "keywords": "Property Client | Improve this Doc View Source Client The client associated to this Packet; null if this Packet is a server instance. Declaration protected ParcelClient Client { get; } Property Value Type Description ParcelClient"
  },
  "api/Parcel.Packets.Packet.html": {
    "href": "api/Parcel.Packets.Packet.html",
    "title": "Class Packet | Parcel",
    "keywords": "Class Packet Base class for all Packets. Inheritance System.Object Packet ClientToServerPacket ServerToClientPacket SyncedObject Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public abstract class Packet : object Properties Name Description Client The client associated to this Packet; null if this Packet is a server instance. IsClient Whether this Packet is client instance of not. IsServer Whether this Packet is a server instance or not. Sender The Peer who sent this Packet. Server The server associated to this Packet; null if this Packet is a client instance. Methods Name Description CanSend() Override this method to implement logic for determining if this Packet can be sent. OnReceive() Override this method to perform logic shortly after this Packet is deserialized and received. OnSend() Override this method to perform logic shortly before this Packet is serialized and sent."
  },
  "api/Parcel.Packets.Packet.IsClient.html": {
    "href": "api/Parcel.Packets.Packet.IsClient.html",
    "title": "Property IsClient | Parcel",
    "keywords": "Property IsClient | Improve this Doc View Source IsClient Whether this Packet is client instance of not. Declaration protected bool IsClient { get; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Packets.Packet.IsServer.html": {
    "href": "api/Parcel.Packets.Packet.IsServer.html",
    "title": "Property IsServer | Parcel",
    "keywords": "Property IsServer | Improve this Doc View Source IsServer Whether this Packet is a server instance or not. Declaration protected bool IsServer { get; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Packets.Packet.OnReceive.html": {
    "href": "api/Parcel.Packets.Packet.OnReceive.html",
    "title": "Method OnReceive | Parcel",
    "keywords": "Method OnReceive | Improve this Doc View Source OnReceive() Override this method to perform logic shortly after this Packet is deserialized and received. Declaration protected virtual void OnReceive()"
  },
  "api/Parcel.Packets.Packet.OnSend.html": {
    "href": "api/Parcel.Packets.Packet.OnSend.html",
    "title": "Method OnSend | Parcel",
    "keywords": "Method OnSend | Improve this Doc View Source OnSend() Override this method to perform logic shortly before this Packet is serialized and sent. Declaration protected virtual void OnSend()"
  },
  "api/Parcel.Packets.Packet.Sender.html": {
    "href": "api/Parcel.Packets.Packet.Sender.html",
    "title": "Property Sender | Parcel",
    "keywords": "Property Sender | Improve this Doc View Source Sender The Peer who sent this Packet. Declaration public Peer Sender { get; set; } Property Value Type Description Peer"
  },
  "api/Parcel.Packets.Packet.Server.html": {
    "href": "api/Parcel.Packets.Packet.Server.html",
    "title": "Property Server | Parcel",
    "keywords": "Property Server | Improve this Doc View Source Server The server associated to this Packet; null if this Packet is a client instance. Declaration protected ParcelServer Server { get; } Property Value Type Description ParcelServer"
  },
  "api/Parcel.Packets.ServerToClientPacket.CanSend.html": {
    "href": "api/Parcel.Packets.ServerToClientPacket.CanSend.html",
    "title": "Method CanSend | Parcel",
    "keywords": "Method CanSend | Improve this Doc View Source CanSend() Override this method to implement logic for determining if this Packet can be sent. Declaration protected override bool CanSend() Returns Type Description System.Boolean true if the packet should be sent; otherwise false . Overrides Packet.CanSend() Remarks This can be used to validate parameters before sending or any other logic."
  },
  "api/Parcel.Packets.ServerToClientPacket.html": {
    "href": "api/Parcel.Packets.ServerToClientPacket.html",
    "title": "Class ServerToClientPacket | Parcel",
    "keywords": "Class ServerToClientPacket Packet that can only travel from a ParcelServer to a ParcelClient . Inheritance System.Object Packet ServerToClientPacket Inherited Members Packet.Sender Packet.IsServer Packet.IsClient Packet.Client Packet.Server Packet.OnSend() Packet.OnReceive() Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public class ServerToClientPacket : Packet Methods Name Description CanSend() Override this method to implement logic for determining if this Packet can be sent."
  },
  "api/Parcel.Packets.SyncedObject.AddSubscriptions.html": {
    "href": "api/Parcel.Packets.SyncedObject.AddSubscriptions.html",
    "title": "Method AddSubscriptions | Parcel",
    "keywords": "Method AddSubscriptions | Improve this Doc View Source AddSubscriptions(Peer[]) Add Subscribers to this SyncedObject. Declaration public void AddSubscriptions(params Peer[] subscribers) Parameters Type Name Description Peer [] subscribers The Peers to subscribe."
  },
  "api/Parcel.Packets.SyncedObject.Equals.html": {
    "href": "api/Parcel.Packets.SyncedObject.Equals.html",
    "title": "Method Equals | Parcel",
    "keywords": "Method Equals | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean"
  },
  "api/Parcel.Packets.SyncedObject.GetHashCode.html": {
    "href": "api/Parcel.Packets.SyncedObject.GetHashCode.html",
    "title": "Method GetHashCode | Parcel",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/Parcel.Packets.SyncedObject.GetSubscriptions.html": {
    "href": "api/Parcel.Packets.SyncedObject.GetSubscriptions.html",
    "title": "Method GetSubscriptions | Parcel",
    "keywords": "Method GetSubscriptions | Improve this Doc View Source GetSubscriptions() Get an array of Subscribers to this SyncedObject. Declaration public Peer[] GetSubscriptions() Returns Type Description Peer [] An array of Peers ."
  },
  "api/Parcel.Packets.SyncedObject.html": {
    "href": "api/Parcel.Packets.SyncedObject.html",
    "title": "Class SyncedObject | Parcel",
    "keywords": "Class SyncedObject Base class for SyncedObjects. Inheritance System.Object Packet SyncedObject Inherited Members Packet.Sender Packet.IsServer Packet.IsClient Packet.Client Packet.Server Packet.CanSend() Packet.OnSend() Packet.OnReceive() Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public abstract class SyncedObject : Packet Remarks SyncedObjects allow for synchronization of the object's properties across multiple clients. Properties Name Description ID The ID of this SyncedObject. Owner The Peer who owns this SyncedObject . Methods Name Description AddSubscriptions(Peer[]) Add Subscribers to this SyncedObject. Equals(Object) GetHashCode() GetSubscriptions() Get an array of Subscribers to this SyncedObject. OnCreated() Override this method to perform logic for when this SyncedObject is first created on a client or server. OnDestroyed() Override this method to perform logic for when this SyncedObject is destroyed on a client or server. OnOwnerChange(Peer, Peer) Override this method to perform logic when this SyncedObject's owner changes. OnPropertiesChanged(Dictionary<String, SyncedObject.PropertyChanges>) Override this method to perform logic when any properties change. RemoveSubscriptions(Peer[]) Remove Subscribers from this SyncedObject. SyncProperty(String) Call this method when a properties value changes to mark it for synchronization when this SyncedObject is next sent. TransferOwnership(Peer) Transfer the ownership of this SyncedObject to newOwner ."
  },
  "api/Parcel.Packets.SyncedObject.ID.html": {
    "href": "api/Parcel.Packets.SyncedObject.ID.html",
    "title": "Property ID | Parcel",
    "keywords": "Property ID | Improve this Doc View Source ID The ID of this SyncedObject. Declaration public SyncedObjectID ID { get; } Property Value Type Description SyncedObjectID"
  },
  "api/Parcel.Packets.SyncedObject.OnCreated.html": {
    "href": "api/Parcel.Packets.SyncedObject.OnCreated.html",
    "title": "Method OnCreated | Parcel",
    "keywords": "Method OnCreated | Improve this Doc View Source OnCreated() Override this method to perform logic for when this SyncedObject is first created on a client or server. Declaration protected virtual void OnCreated()"
  },
  "api/Parcel.Packets.SyncedObject.OnDestroyed.html": {
    "href": "api/Parcel.Packets.SyncedObject.OnDestroyed.html",
    "title": "Method OnDestroyed | Parcel",
    "keywords": "Method OnDestroyed | Improve this Doc View Source OnDestroyed() Override this method to perform logic for when this SyncedObject is destroyed on a client or server. Declaration protected virtual void OnDestroyed()"
  },
  "api/Parcel.Packets.SyncedObject.OnOwnerChange.html": {
    "href": "api/Parcel.Packets.SyncedObject.OnOwnerChange.html",
    "title": "Method OnOwnerChange | Parcel",
    "keywords": "Method OnOwnerChange | Improve this Doc View Source OnOwnerChange(Peer, Peer) Override this method to perform logic when this SyncedObject's owner changes. Declaration protected virtual void OnOwnerChange(Peer previousOwner, Peer newOwner) Parameters Type Name Description Peer previousOwner The Peer who previously owned this SyncedObject. Peer newOwner The Peer who now owns this SyncedObject."
  },
  "api/Parcel.Packets.SyncedObject.OnPropertiesChanged.html": {
    "href": "api/Parcel.Packets.SyncedObject.OnPropertiesChanged.html",
    "title": "Method OnPropertiesChanged | Parcel",
    "keywords": "Method OnPropertiesChanged | Improve this Doc View Source OnPropertiesChanged(Dictionary<String, SyncedObject.PropertyChanges>) Override this method to perform logic when any properties change. Declaration protected virtual void OnPropertiesChanged(Dictionary<string, SyncedObject.PropertyChanges> changes) Parameters Type Name Description Dictionary < System.String , SyncedObject.PropertyChanges > changes A Dictionary of property changes, where the key is the name of the property."
  },
  "api/Parcel.Packets.SyncedObject.Owner.html": {
    "href": "api/Parcel.Packets.SyncedObject.Owner.html",
    "title": "Property Owner | Parcel",
    "keywords": "Property Owner | Improve this Doc View Source Owner The Peer who owns this SyncedObject . Declaration public Peer Owner { get; } Property Value Type Description Peer"
  },
  "api/Parcel.Packets.SyncedObject.PropertyChanges.-ctor.html": {
    "href": "api/Parcel.Packets.SyncedObject.PropertyChanges.-ctor.html",
    "title": "Constructor PropertyChanges | Parcel",
    "keywords": "Constructor PropertyChanges | Improve this Doc View Source PropertyChanges(Object, Object) Construct a new PropertyChanges struct. Declaration public PropertyChanges(object previous, object current) Parameters Type Name Description System.Object previous The previous value of the property. System.Object current The current value of the property."
  },
  "api/Parcel.Packets.SyncedObject.PropertyChanges.Current.html": {
    "href": "api/Parcel.Packets.SyncedObject.PropertyChanges.Current.html",
    "title": "Property Current | Parcel",
    "keywords": "Property Current | Improve this Doc View Source Current The current value of the property. Declaration public object Current { get; } Property Value Type Description System.Object"
  },
  "api/Parcel.Packets.SyncedObject.PropertyChanges.html": {
    "href": "api/Parcel.Packets.SyncedObject.PropertyChanges.html",
    "title": "Struct SyncedObject.PropertyChanges | Parcel",
    "keywords": "Struct SyncedObject.PropertyChanges Represents changes made to a property. Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax protected struct PropertyChanges Constructors Name Description PropertyChanges(Object, Object) Construct a new PropertyChanges struct. Properties Name Description Current The current value of the property. Previous The previous value of the property."
  },
  "api/Parcel.Packets.SyncedObject.PropertyChanges.Previous.html": {
    "href": "api/Parcel.Packets.SyncedObject.PropertyChanges.Previous.html",
    "title": "Property Previous | Parcel",
    "keywords": "Property Previous | Improve this Doc View Source Previous The previous value of the property. Declaration public object Previous { get; } Property Value Type Description System.Object"
  },
  "api/Parcel.Packets.SyncedObject.RemoveSubscriptions.html": {
    "href": "api/Parcel.Packets.SyncedObject.RemoveSubscriptions.html",
    "title": "Method RemoveSubscriptions | Parcel",
    "keywords": "Method RemoveSubscriptions | Improve this Doc View Source RemoveSubscriptions(Peer[]) Remove Subscribers from this SyncedObject. Declaration public void RemoveSubscriptions(params Peer[] subscribers) Parameters Type Name Description Peer [] subscribers The Peers to unsubscribe."
  },
  "api/Parcel.Packets.SyncedObject.SyncProperty.html": {
    "href": "api/Parcel.Packets.SyncedObject.SyncProperty.html",
    "title": "Method SyncProperty | Parcel",
    "keywords": "Method SyncProperty | Improve this Doc View Source SyncProperty(String) Call this method when a properties value changes to mark it for synchronization when this SyncedObject is next sent. Declaration protected void SyncProperty(string propertyName = null) Parameters Type Name Description System.String propertyName The name of the property that changed. Remarks This method provides a manual way of tracking changes made to a SyncedObject. It can also be used for tracking changes to complex objects such as Dictionaries where the property setter isn't necessarily being called. The propertyName parameter is optional and will be auto-filled by the compiler if not included. Examples Example of usage in a setter: private string _myProp; public string MyProp { get => this._myProp; set { this._myProp = value; SyncProperty(); } } Example of usage for complex data structures: public Dictionary<string, object> MyDict { get; set; } public void AddEntry(string key, object o) { this.MyDict.Add(key, o); SyncProperty(nameof(this.MyDict)); }"
  },
  "api/Parcel.Packets.SyncedObject.TransferOwnership.html": {
    "href": "api/Parcel.Packets.SyncedObject.TransferOwnership.html",
    "title": "Method TransferOwnership | Parcel",
    "keywords": "Method TransferOwnership | Improve this Doc View Source TransferOwnership(Peer) Transfer the ownership of this SyncedObject to newOwner . Declaration public void TransferOwnership(Peer newOwner) Parameters Type Name Description Peer newOwner The Peer who will now own this SyncedObject."
  },
  "api/Parcel.Packets.SyncedObjectID.-ctor.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.-ctor.html",
    "title": "Constructor SyncedObjectID | Parcel",
    "keywords": "Constructor SyncedObjectID | Improve this Doc View Source SyncedObjectID(UInt32) Construct a new SyncedObjectID struct. Declaration public SyncedObjectID(uint id) Parameters Type Name Description System.UInt32 id The underlying uint ID."
  },
  "api/Parcel.Packets.SyncedObjectID.Equals.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.Equals.html",
    "title": "Method Equals | Parcel",
    "keywords": "Method Equals | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean"
  },
  "api/Parcel.Packets.SyncedObjectID.GetHashCode.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.GetHashCode.html",
    "title": "Method GetHashCode | Parcel",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/Parcel.Packets.SyncedObjectID.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.html",
    "title": "Struct SyncedObjectID | Parcel",
    "keywords": "Struct SyncedObjectID Represents an ID of a SyncedObject . Namespace : Parcel.Packets Assembly : ParcelPacketManager.dll Syntax public struct SyncedObjectID Constructors Name Description SyncedObjectID(UInt32) Construct a new SyncedObjectID struct. Methods Name Description Equals(Object) GetHashCode() ToString() Operators Name Description Equality(SyncedObjectID, SyncedObjectID) Explicit(UInt32 to SyncedObjectID) Explicitly convert a uint to a SyncedObjectID. Implicit(SyncedObjectID to UInt32) Implicitly convert a SyncedObjectID to a uint. Inequality(SyncedObjectID, SyncedObjectID)"
  },
  "api/Parcel.Packets.SyncedObjectID.op_Equality.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.op_Equality.html",
    "title": "Operator Equality | Parcel",
    "keywords": "Operator Equality | Improve this Doc View Source Equality(SyncedObjectID, SyncedObjectID) Declaration public static bool operator ==(SyncedObjectID left, SyncedObjectID right) Parameters Type Name Description SyncedObjectID left SyncedObjectID right Returns Type Description System.Boolean"
  },
  "api/Parcel.Packets.SyncedObjectID.op_Explicit.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.op_Explicit.html",
    "title": "Operator Explicit | Parcel",
    "keywords": "Operator Explicit | Improve this Doc View Source Explicit(UInt32 to SyncedObjectID) Explicitly convert a uint to a SyncedObjectID. Declaration public static explicit operator SyncedObjectID(uint id) Parameters Type Name Description System.UInt32 id The uint to convert. Returns Type Description SyncedObjectID"
  },
  "api/Parcel.Packets.SyncedObjectID.op_Implicit.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.op_Implicit.html",
    "title": "Operator Implicit | Parcel",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(SyncedObjectID to UInt32) Implicitly convert a SyncedObjectID to a uint. Declaration public static implicit operator uint (SyncedObjectID soid) Parameters Type Name Description SyncedObjectID soid The SyncedObjectID to convert. Returns Type Description System.UInt32"
  },
  "api/Parcel.Packets.SyncedObjectID.op_Inequality.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.op_Inequality.html",
    "title": "Operator Inequality | Parcel",
    "keywords": "Operator Inequality | Improve this Doc View Source Inequality(SyncedObjectID, SyncedObjectID) Declaration public static bool operator !=(SyncedObjectID left, SyncedObjectID right) Parameters Type Name Description SyncedObjectID left SyncedObjectID right Returns Type Description System.Boolean"
  },
  "api/Parcel.Packets.SyncedObjectID.ToString.html": {
    "href": "api/Parcel.Packets.SyncedObjectID.ToString.html",
    "title": "Method ToString | Parcel",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Parcel.ParcelClient.Connected.html": {
    "href": "api/Parcel.ParcelClient.Connected.html",
    "title": "Property Connected | Parcel",
    "keywords": "Property Connected | Improve this Doc View Source Connected Whether the client is currently connected to a server or not. Declaration public bool Connected { get; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.ParcelClient.ConnectTo.html": {
    "href": "api/Parcel.ParcelClient.ConnectTo.html",
    "title": "Method ConnectTo | Parcel",
    "keywords": "Method ConnectTo | Improve this Doc View Source ConnectTo(ConnectionToken) Asynchronously connect to a remote user. Declaration public async Task<ConnectionResult> ConnectTo(ConnectionToken connectionToken) Parameters Type Name Description ConnectionToken connectionToken The ConnectionToken of the remote user. Returns Type Description Task < ConnectionResult > true if the connection is successful; otherwise, false"
  },
  "api/Parcel.ParcelClient.CreateSyncedObject.html": {
    "href": "api/Parcel.ParcelClient.CreateSyncedObject.html",
    "title": "Method CreateSyncedObject | Parcel",
    "keywords": "Method CreateSyncedObject | Improve this Doc View Source CreateSyncedObject(Type) Requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. Declaration public SyncedObject CreateSyncedObject(Type type) Parameters Type Name Description Type type The of SyncedObject to create. Returns Type Description SyncedObject The newly created SyncedObject . Remarks Due to this method needing to make a call to the server, the current thread will be blocked until a response from the server is received. If you don't want the thread to be blocked, use CreateSyncedObjectAsync(Type) . | Improve this Doc View Source CreateSyncedObject<T>() Requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. Declaration public T CreateSyncedObject<T>() where T : SyncedObject, new() Returns Type Description T The newly created SyncedObject . Type Parameters Name Description T The of SyncedObject to create. Remarks Due to this method needing to make a call to the server, the current thread will be blocked until a response from the server is received. If you don't want the thread to be blocked, use CreateSyncedObjectAsync<T>() ."
  },
  "api/Parcel.ParcelClient.CreateSyncedObjectAsync.html": {
    "href": "api/Parcel.ParcelClient.CreateSyncedObjectAsync.html",
    "title": "Method CreateSyncedObjectAsync | Parcel",
    "keywords": "Method CreateSyncedObjectAsync | Improve this Doc View Source CreateSyncedObjectAsync(Type) Asynchronously requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. Declaration public Task<SyncedObject> CreateSyncedObjectAsync(Type type) Parameters Type Name Description Type type The of SyncedObject to create. Returns Type Description Task < SyncedObject > The newly created SyncedObject . | Improve this Doc View Source CreateSyncedObjectAsync<T>() Asynchronously requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. Declaration public async Task<T> CreateSyncedObjectAsync<T>() where T : SyncedObject, new() Returns Type Description Task <T> The newly created SyncedObject . Type Parameters Name Description T The of SyncedObject to create."
  },
  "api/Parcel.ParcelClient.-ctor.html": {
    "href": "api/Parcel.ParcelClient.-ctor.html",
    "title": "Constructor ParcelClient | Parcel",
    "keywords": "Constructor ParcelClient | Improve this Doc View Source ParcelClient(ParcelSettings) Construct a new instance of ParcelClient using settings . Declaration public ParcelClient(ParcelSettings settings) Parameters Type Name Description ParcelSettings settings The Network Settings to use."
  },
  "api/Parcel.ParcelClient.DestroySyncedObject.html": {
    "href": "api/Parcel.ParcelClient.DestroySyncedObject.html",
    "title": "Method DestroySyncedObject | Parcel",
    "keywords": "Method DestroySyncedObject | Improve this Doc View Source DestroySyncedObject(SyncedObjectID) Requests the destruction of a SyncedObject by the remote server. Declaration public bool DestroySyncedObject(SyncedObjectID syncedObjectID) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject to destroy. Returns Type Description System.Boolean true if the destruction was successful; otherwise, false . Remarks Due to this method needing to make a call to the server, the current thread will be blocked until a response from the server is received. If you don't want the thread to be blocked, use DestroySyncedObjectAsync(SyncedObjectID) ."
  },
  "api/Parcel.ParcelClient.DestroySyncedObjectAsync.html": {
    "href": "api/Parcel.ParcelClient.DestroySyncedObjectAsync.html",
    "title": "Method DestroySyncedObjectAsync | Parcel",
    "keywords": "Method DestroySyncedObjectAsync | Improve this Doc View Source DestroySyncedObjectAsync(SyncedObjectID) Asynchronously requests the destruction of a SyncedObject by the remote server. Declaration public async Task<bool> DestroySyncedObjectAsync(SyncedObjectID syncedObjectID) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject to destroy. Returns Type Description Task < System.Boolean > true if the destruction was successful; otherwise, false ."
  },
  "api/Parcel.ParcelClient.Disconnect.html": {
    "href": "api/Parcel.ParcelClient.Disconnect.html",
    "title": "Method Disconnect | Parcel",
    "keywords": "Method Disconnect | Improve this Doc View Source Disconnect() Disconnect from the remote user. Declaration public void Disconnect()"
  },
  "api/Parcel.ParcelClient.Dispose.html": {
    "href": "api/Parcel.ParcelClient.Dispose.html",
    "title": "Method Dispose | Parcel",
    "keywords": "Method Dispose | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/Parcel.ParcelClient.GetPing.html": {
    "href": "api/Parcel.ParcelClient.GetPing.html",
    "title": "Method GetPing | Parcel",
    "keywords": "Method GetPing | Improve this Doc View Source GetPing() Get the ping to the server. Declaration public int GetPing() Returns Type Description System.Int32 The ping to the remote server."
  },
  "api/Parcel.ParcelClient.html": {
    "href": "api/Parcel.ParcelClient.html",
    "title": "Class ParcelClient | Parcel",
    "keywords": "Class ParcelClient Provides client-side network services. Inheritance System.Object ParcelClient Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class ParcelClient : IDisposable Remarks The ParcelClient handles serialization, deserialization, sending, and receiving of Packets and SyncedObjects . The ParcelClient also provides utilities working with SyncedObjects such as Creation , Destruction , and Ownership Transfer requests. Constructors Name Description ParcelClient(ParcelSettings) Construct a new instance of ParcelClient using settings . Properties Name Description Connected Whether the client is currently connected to a server or not. NetworkSettings The Network Settings used by this client. Remote The Peer that represents the server. Self The Peer that represents this client. Methods Name Description ConnectTo(ConnectionToken) Asynchronously connect to a remote user. CreateSyncedObject(Type) Requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. CreateSyncedObject<T>() Requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. CreateSyncedObjectAsync(Type) Asynchronously requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. CreateSyncedObjectAsync<T>() Asynchronously requests the creation of a SyncedObject from the remote server. NOTE: Not implemented yet. DestroySyncedObject(SyncedObjectID) Requests the destruction of a SyncedObject by the remote server. DestroySyncedObjectAsync(SyncedObjectID) Asynchronously requests the destruction of a SyncedObject by the remote server. Disconnect() Disconnect from the remote user. Dispose() GetPing() Get the ping to the server. Loop() Perform a single loop iteration that that serializes, sends, deserializes, and receives Packets . Send(Packet) Send a Packet to the remote server. Send(Packet, Peer) Send a relay Packet to another Peer connected to the same server. NOTE: Not implemented yet. TransferSyncedObjectOwnership(SyncedObjectID, Peer) Requests for the ownership of a SyncedObject to be transfered to another Peer by the remote server. NOTE: Not implemented yet. TransferSyncedObjectOwnershipAsync(SyncedObjectID, Peer) Asynchronously requests for the ownership of a SyncedObject to be transfered to another Peer by the remote server. NOTE: Not implemented yet. TryGetSyncedObject(SyncedObjectID, out SyncedObject) Try to get a local instance of a SyncedObject using its ID . TryGetSyncedObject<T>(SyncedObjectID, out T) Try to get a local SyncedObject of type T using its ID . Events Name Description OnConnected Invoked when connected to the server. OnDisconnected Invoked when disconnected from the server."
  },
  "api/Parcel.ParcelClient.Loop.html": {
    "href": "api/Parcel.ParcelClient.Loop.html",
    "title": "Method Loop | Parcel",
    "keywords": "Method Loop | Improve this Doc View Source Loop() Perform a single loop iteration that that serializes, sends, deserializes, and receives Packets . Declaration public int Loop() Returns Type Description System.Int32 Returns the number of milliseconds the loop took to complete."
  },
  "api/Parcel.ParcelClient.NetworkSettings.html": {
    "href": "api/Parcel.ParcelClient.NetworkSettings.html",
    "title": "Property NetworkSettings | Parcel",
    "keywords": "Property NetworkSettings | Improve this Doc View Source NetworkSettings The Network Settings used by this client. Declaration public ParcelSettings NetworkSettings { get; } Property Value Type Description ParcelSettings"
  },
  "api/Parcel.ParcelClient.OnConnected.html": {
    "href": "api/Parcel.ParcelClient.OnConnected.html",
    "title": "Event OnConnected | Parcel",
    "keywords": "Event OnConnected Invoked when connected to the server. Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public event ConnectionDelegate OnConnected Returns Type Description ConnectionDelegate"
  },
  "api/Parcel.ParcelClient.OnDisconnected.html": {
    "href": "api/Parcel.ParcelClient.OnDisconnected.html",
    "title": "Event OnDisconnected | Parcel",
    "keywords": "Event OnDisconnected Invoked when disconnected from the server. Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public event DisconnectionDelegate OnDisconnected Returns Type Description DisconnectionDelegate"
  },
  "api/Parcel.ParcelClient.Remote.html": {
    "href": "api/Parcel.ParcelClient.Remote.html",
    "title": "Property Remote | Parcel",
    "keywords": "Property Remote | Improve this Doc View Source Remote The Peer that represents the server. Declaration public Peer Remote { get; } Property Value Type Description Peer"
  },
  "api/Parcel.ParcelClient.Self.html": {
    "href": "api/Parcel.ParcelClient.Self.html",
    "title": "Property Self | Parcel",
    "keywords": "Property Self | Improve this Doc View Source Self The Peer that represents this client. Declaration public Peer Self { get; } Property Value Type Description Peer"
  },
  "api/Parcel.ParcelClient.Send.html": {
    "href": "api/Parcel.ParcelClient.Send.html",
    "title": "Method Send | Parcel",
    "keywords": "Method Send | Improve this Doc View Source Send(Packet) Send a Packet to the remote server. Declaration public void Send(Packet packet) Parameters Type Name Description Packet packet The Packet to send. | Improve this Doc View Source Send(Packet, Peer) Send a relay Packet to another Peer connected to the same server. NOTE: Not implemented yet. Declaration public void Send(Packet packet, Peer sendTo) Parameters Type Name Description Packet packet The Packet to send. Peer sendTo The Peer to send the Packet to. Remarks Packets sent in this manner will first be sent to the server, at which point they will be relayed to the appropriate client."
  },
  "api/Parcel.ParcelClient.TransferSyncedObjectOwnership.html": {
    "href": "api/Parcel.ParcelClient.TransferSyncedObjectOwnership.html",
    "title": "Method TransferSyncedObjectOwnership | Parcel",
    "keywords": "Method TransferSyncedObjectOwnership | Improve this Doc View Source TransferSyncedObjectOwnership(SyncedObjectID, Peer) Requests for the ownership of a SyncedObject to be transfered to another Peer by the remote server. NOTE: Not implemented yet. Declaration public bool TransferSyncedObjectOwnership(SyncedObjectID syncedObjectID, Peer newOwner) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . Peer newOwner The Peer who will now own this SyncedObject . Returns Type Description System.Boolean true if the ownership transfer was successful; otherwise, false . Remarks Due to this method needing to make a call to the server, the current thread will be blocked until a response from the server is received. If you don't want the thread to be blocked, use TransferSyncedObjectOwnershipAsync(SyncedObjectID, Peer) ."
  },
  "api/Parcel.ParcelClient.TransferSyncedObjectOwnershipAsync.html": {
    "href": "api/Parcel.ParcelClient.TransferSyncedObjectOwnershipAsync.html",
    "title": "Method TransferSyncedObjectOwnershipAsync | Parcel",
    "keywords": "Method TransferSyncedObjectOwnershipAsync | Improve this Doc View Source TransferSyncedObjectOwnershipAsync(SyncedObjectID, Peer) Asynchronously requests for the ownership of a SyncedObject to be transfered to another Peer by the remote server. NOTE: Not implemented yet. Declaration public async Task<bool> TransferSyncedObjectOwnershipAsync(SyncedObjectID syncedObjectID, Peer newOwner) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . Peer newOwner The Peer who will now own this SyncedObject . Returns Type Description Task < System.Boolean > true if the ownership transfer was successful; otherwise, false ."
  },
  "api/Parcel.ParcelClient.TryGetSyncedObject.html": {
    "href": "api/Parcel.ParcelClient.TryGetSyncedObject.html",
    "title": "Method TryGetSyncedObject | Parcel",
    "keywords": "Method TryGetSyncedObject | Improve this Doc View Source TryGetSyncedObject(SyncedObjectID, out SyncedObject) Try to get a local instance of a SyncedObject using its ID . Declaration public bool TryGetSyncedObject(SyncedObjectID syncedObjectID, out SyncedObject syncedObject) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . SyncedObject syncedObject The SyncedObject if one was found; otherwise, null . Returns Type Description System.Boolean true if the SyncedObject was found; otherwise, false . | Improve this Doc View Source TryGetSyncedObject<T>(SyncedObjectID, out T) Try to get a local SyncedObject of type T using its ID . Declaration public bool TryGetSyncedObject<T>(SyncedObjectID syncedObjectID, out T syncedObject) where T : SyncedObject, new() Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . T syncedObject The SyncedObject as type T if one was found; otherwise, null . Returns Type Description System.Boolean true if a SyncedObject of type T was found; otherwise, false . Type Parameters Name Description T The type of SyncedObject to try to get."
  },
  "api/Parcel.ParcelServer.AddSyncedObjectSubscriptions.html": {
    "href": "api/Parcel.ParcelServer.AddSyncedObjectSubscriptions.html",
    "title": "Method AddSyncedObjectSubscriptions | Parcel",
    "keywords": "Method AddSyncedObjectSubscriptions | Improve this Doc View Source AddSyncedObjectSubscriptions(SyncedObjectID, Peer[]) Try to add subscriptions to a SyncedObject using its ID . Declaration public bool AddSyncedObjectSubscriptions(SyncedObjectID syncedObjectID, params Peer[] subscribers) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . Peer [] subscribers The new subscribers to add. Returns Type Description System.Boolean true if the SyncedObject was found; otherwise, false ."
  },
  "api/Parcel.ParcelServer.CreateSyncedObject.html": {
    "href": "api/Parcel.ParcelServer.CreateSyncedObject.html",
    "title": "Method CreateSyncedObject | Parcel",
    "keywords": "Method CreateSyncedObject | Improve this Doc View Source CreateSyncedObject(Type, Peer) Create a new SyncedObject of type . Declaration public SyncedObject CreateSyncedObject(Type type, Peer owner) Parameters Type Name Description Type type The type of SyncedObject to create. Peer owner The Peer who will own the new SyncedObject . Returns Type Description SyncedObject The instance of the new SyncedObject . | Improve this Doc View Source CreateSyncedObject<T>(Peer) Create a new SyncedObject of type T . Declaration public T CreateSyncedObject<T>(Peer owner) where T : SyncedObject, new() Parameters Type Name Description Peer owner The Peer who will own the new SyncedObject . Returns Type Description T The instance of the new SyncedObject . Type Parameters Name Description T The type of SyncedObject to create."
  },
  "api/Parcel.ParcelServer.-ctor.html": {
    "href": "api/Parcel.ParcelServer.-ctor.html",
    "title": "Constructor ParcelServer | Parcel",
    "keywords": "Constructor ParcelServer | Improve this Doc View Source ParcelServer(ParcelSettings) Construct a new instance of ParcelServer using settings . Declaration public ParcelServer(ParcelSettings settings) Parameters Type Name Description ParcelSettings settings The Network Settings to use."
  },
  "api/Parcel.ParcelServer.DestroySyncedObject.html": {
    "href": "api/Parcel.ParcelServer.DestroySyncedObject.html",
    "title": "Method DestroySyncedObject | Parcel",
    "keywords": "Method DestroySyncedObject | Improve this Doc View Source DestroySyncedObject(SyncedObjectID) Destroy a SyncedObject with syncedObjectID . Declaration public bool DestroySyncedObject(SyncedObjectID syncedObjectID) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject to destroy. Returns Type Description System.Boolean false if the SyncedObject has already been destroyed or is non-existant; otherwise, true ."
  },
  "api/Parcel.ParcelServer.Dispose.html": {
    "href": "api/Parcel.ParcelServer.Dispose.html",
    "title": "Method Dispose | Parcel",
    "keywords": "Method Dispose | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/Parcel.ParcelServer.ForceDisconnect.html": {
    "href": "api/Parcel.ParcelServer.ForceDisconnect.html",
    "title": "Method ForceDisconnect | Parcel",
    "keywords": "Method ForceDisconnect | Improve this Doc View Source ForceDisconnect(Peer, String) Forcibly disconnect a Peer from this server. Declaration public void ForceDisconnect(Peer peer, string message = null) Parameters Type Name Description Peer peer The Peer to disconnect. System.String message The message to include with the forced disconnection."
  },
  "api/Parcel.ParcelServer.GetPingOfPeer.html": {
    "href": "api/Parcel.ParcelServer.GetPingOfPeer.html",
    "title": "Method GetPingOfPeer | Parcel",
    "keywords": "Method GetPingOfPeer | Improve this Doc View Source GetPingOfPeer(Peer) Get the ping of a Peer connected to the server. Declaration public int GetPingOfPeer(Peer peer) Parameters Type Name Description Peer peer The Peer to get the ping of. Returns Type Description System.Int32 The ping to Peer ."
  },
  "api/Parcel.ParcelServer.html": {
    "href": "api/Parcel.ParcelServer.html",
    "title": "Class ParcelServer | Parcel",
    "keywords": "Class ParcelServer Provides server-side network services. Inheritance System.Object ParcelServer Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public class ParcelServer : object Remarks The ParcelServer handles serialization, deserialization, sending, and receiving of Packets and SyncedObjects . The ParcelServer also provides utilities working with SyncedObjects such as Creation , Destruction , and Ownership Transfer calls. Constructors Name Description ParcelServer(ParcelSettings) Construct a new instance of ParcelServer using settings . Properties Name Description NetworkSettings The Network Settings used by this client. RemotePeers An array of Peers who are connected to this server. Self The Peer that represents this client. Methods Name Description AddSyncedObjectSubscriptions(SyncedObjectID, Peer[]) Try to add subscriptions to a SyncedObject using its ID . CreateSyncedObject(Type, Peer) Create a new SyncedObject of type . CreateSyncedObject<T>(Peer) Create a new SyncedObject of type T . DestroySyncedObject(SyncedObjectID) Destroy a SyncedObject with syncedObjectID . Dispose() ForceDisconnect(Peer, String) Forcibly disconnect a Peer from this server. GetPingOfPeer(Peer) Get the ping of a Peer connected to the server. Loop() Perform a single loop iteration that that serializes, sends, deserializes, and receives Packets . RemoveSyncedObjectSubscriptions(SyncedObjectID, Peer[]) Try to remove subscriptions from a SyncedObject using its ID . Send(Packet) Send a Packet to all valid remote clients. Send(Packet, Peer[]) Send a Packet to selected remote clients. TryGetSyncedObject(SyncedObjectID, out SyncedObject) Try to get a local instance of a SyncedObject using its ID . TryGetSyncedObject<T>(SyncedObjectID, out T) Try to get a local SyncedObject of type T using its ID . TryGetSyncedObjectSubscribers(SyncedObjectID, out Peer[]) Try to get the subscribers of a SyncedObject using its ID . TryTransferSyncedObjectOwnership(SyncedObjectID, Peer) Try to transfer the ownership of a SyncedObject using its ID . Events Name Description OnInitialConnection Invoked when a connection to the server is being processed. OnRemoteConnected Invoked when a connection is made to the server. OnRemoteDisconnected Invoked when a disconnection is made to the server."
  },
  "api/Parcel.ParcelServer.Loop.html": {
    "href": "api/Parcel.ParcelServer.Loop.html",
    "title": "Method Loop | Parcel",
    "keywords": "Method Loop | Improve this Doc View Source Loop() Perform a single loop iteration that that serializes, sends, deserializes, and receives Packets . Declaration public int Loop() Returns Type Description System.Int32 Returns the number of milliseconds the loop took to complete."
  },
  "api/Parcel.ParcelServer.NetworkSettings.html": {
    "href": "api/Parcel.ParcelServer.NetworkSettings.html",
    "title": "Property NetworkSettings | Parcel",
    "keywords": "Property NetworkSettings | Improve this Doc View Source NetworkSettings The Network Settings used by this client. Declaration public ParcelSettings NetworkSettings { get; } Property Value Type Description ParcelSettings"
  },
  "api/Parcel.ParcelServer.OnInitialConnection.html": {
    "href": "api/Parcel.ParcelServer.OnInitialConnection.html",
    "title": "Event OnInitialConnection | Parcel",
    "keywords": "Event OnInitialConnection Invoked when a connection to the server is being processed. Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public event InitialConnectionDelegate OnInitialConnection Returns Type Description InitialConnectionDelegate Remarks This event allows for rejecting connections. When this event is invoked, all subscribed expressions will be evaluated and if all return true, the connection will be allowed."
  },
  "api/Parcel.ParcelServer.OnRemoteConnected.html": {
    "href": "api/Parcel.ParcelServer.OnRemoteConnected.html",
    "title": "Event OnRemoteConnected | Parcel",
    "keywords": "Event OnRemoteConnected Invoked when a connection is made to the server. Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public event ConnectionDelegate OnRemoteConnected Returns Type Description ConnectionDelegate"
  },
  "api/Parcel.ParcelServer.OnRemoteDisconnected.html": {
    "href": "api/Parcel.ParcelServer.OnRemoteDisconnected.html",
    "title": "Event OnRemoteDisconnected | Parcel",
    "keywords": "Event OnRemoteDisconnected Invoked when a disconnection is made to the server. Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public event DisconnectionDelegate OnRemoteDisconnected Returns Type Description DisconnectionDelegate"
  },
  "api/Parcel.ParcelServer.RemotePeers.html": {
    "href": "api/Parcel.ParcelServer.RemotePeers.html",
    "title": "Property RemotePeers | Parcel",
    "keywords": "Property RemotePeers | Improve this Doc View Source RemotePeers An array of Peers who are connected to this server. Declaration public Peer[] RemotePeers { get; } Property Value Type Description Peer []"
  },
  "api/Parcel.ParcelServer.RemoveSyncedObjectSubscriptions.html": {
    "href": "api/Parcel.ParcelServer.RemoveSyncedObjectSubscriptions.html",
    "title": "Method RemoveSyncedObjectSubscriptions | Parcel",
    "keywords": "Method RemoveSyncedObjectSubscriptions | Improve this Doc View Source RemoveSyncedObjectSubscriptions(SyncedObjectID, Peer[]) Try to remove subscriptions from a SyncedObject using its ID . Declaration public bool RemoveSyncedObjectSubscriptions(SyncedObjectID syncedObjectID, params Peer[] subscribers) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . Peer [] subscribers The subscribers to remove. Returns Type Description System.Boolean true if the SyncedObject was found; otherwise, false ."
  },
  "api/Parcel.ParcelServer.Self.html": {
    "href": "api/Parcel.ParcelServer.Self.html",
    "title": "Property Self | Parcel",
    "keywords": "Property Self | Improve this Doc View Source Self The Peer that represents this client. Declaration public Peer Self { get; } Property Value Type Description Peer"
  },
  "api/Parcel.ParcelServer.Send.html": {
    "href": "api/Parcel.ParcelServer.Send.html",
    "title": "Method Send | Parcel",
    "keywords": "Method Send | Improve this Doc View Source Send(Packet) Send a Packet to all valid remote clients. Declaration public void Send(Packet packet) Parameters Type Name Description Packet packet The Packet to send. Remarks In the event that packet is an instance of SyncedObject , packet will be sent only to those Peers that are subscribed to the SyncedObject . | Improve this Doc View Source Send(Packet, Peer[]) Send a Packet to selected remote clients. Declaration public void Send(Packet packet, params Peer[] sendTo) Parameters Type Name Description Packet packet Peer [] sendTo Remarks In the event that a null value or disconnected Peer are passed into the sendTo parameter, these values will be automatically removed and the packet will be sent to any valid Peers . If packet is an instance of a SyncedObject , an additional check will prevent packet from being sent to Peers that are not subscribed to the SyncedObject ."
  },
  "api/Parcel.ParcelServer.TryGetSyncedObject.html": {
    "href": "api/Parcel.ParcelServer.TryGetSyncedObject.html",
    "title": "Method TryGetSyncedObject | Parcel",
    "keywords": "Method TryGetSyncedObject | Improve this Doc View Source TryGetSyncedObject(SyncedObjectID, out SyncedObject) Try to get a local instance of a SyncedObject using its ID . Declaration public bool TryGetSyncedObject(SyncedObjectID syncedObjectID, out SyncedObject syncedObject) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . SyncedObject syncedObject The SyncedObject if one was found; otherwise, null . Returns Type Description System.Boolean true if the SyncedObject was found; otherwise, false . | Improve this Doc View Source TryGetSyncedObject<T>(SyncedObjectID, out T) Try to get a local SyncedObject of type T using its ID . Declaration public bool TryGetSyncedObject<T>(SyncedObjectID syncedObjectID, out T syncedObject) where T : SyncedObject, new() Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . T syncedObject The SyncedObject as type T if one was found; otherwise, null . Returns Type Description System.Boolean true if a SyncedObject of type T was found; otherwise, false . Type Parameters Name Description T The type of SyncedObject to try to get."
  },
  "api/Parcel.ParcelServer.TryGetSyncedObjectSubscribers.html": {
    "href": "api/Parcel.ParcelServer.TryGetSyncedObjectSubscribers.html",
    "title": "Method TryGetSyncedObjectSubscribers | Parcel",
    "keywords": "Method TryGetSyncedObjectSubscribers | Improve this Doc View Source TryGetSyncedObjectSubscribers(SyncedObjectID, out Peer[]) Try to get the subscribers of a SyncedObject using its ID . Declaration public bool TryGetSyncedObjectSubscribers(SyncedObjectID syncedObjectID, out Peer[] subscribers) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . Peer [] subscribers An array of Peers who are subscribed to this SyncedObject ; otherwise, an empty array. Returns Type Description System.Boolean true if the SyncedObject was found; otherwise, false ."
  },
  "api/Parcel.ParcelServer.TryTransferSyncedObjectOwnership.html": {
    "href": "api/Parcel.ParcelServer.TryTransferSyncedObjectOwnership.html",
    "title": "Method TryTransferSyncedObjectOwnership | Parcel",
    "keywords": "Method TryTransferSyncedObjectOwnership | Improve this Doc View Source TryTransferSyncedObjectOwnership(SyncedObjectID, Peer) Try to transfer the ownership of a SyncedObject using its ID . Declaration public bool TryTransferSyncedObjectOwnership(SyncedObjectID syncedObjectID, Peer newOwner) Parameters Type Name Description SyncedObjectID syncedObjectID The ID of the SyncedObject . Peer newOwner The Peer who will now own the SyncedObject . Returns Type Description System.Boolean true if the SyncedObject was found and owner was changed; otherwise, false ."
  },
  "api/Parcel.ParcelSettings.ConnectionTimeout.html": {
    "href": "api/Parcel.ParcelSettings.ConnectionTimeout.html",
    "title": "Property ConnectionTimeout | Parcel",
    "keywords": "Property ConnectionTimeout | Improve this Doc View Source ConnectionTimeout The amount of time in milliseconds allowed for connecting to a remote user before connection times out. Declaration public int ConnectionTimeout { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.ParcelSettings.Debugger.html": {
    "href": "api/Parcel.ParcelSettings.Debugger.html",
    "title": "Property Debugger | Parcel",
    "keywords": "Property Debugger | Improve this Doc View Source Debugger A NetworkDebugger instance to use for debugging. Declaration public NetworkDebugger Debugger { get; } Property Value Type Description NetworkDebugger"
  },
  "api/Parcel.ParcelSettings.DisconnectionTimeout.html": {
    "href": "api/Parcel.ParcelSettings.DisconnectionTimeout.html",
    "title": "Property DisconnectionTimeout | Parcel",
    "keywords": "Property DisconnectionTimeout | Improve this Doc View Source DisconnectionTimeout The amount of time in milliseconds allowed since last receiving a Packet from a user before considering them disconnected. Declaration public int DisconnectionTimeout { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.ParcelSettings.html": {
    "href": "api/Parcel.ParcelSettings.html",
    "title": "Class ParcelSettings | Parcel",
    "keywords": "Class ParcelSettings Represents a collection of settings to be used by either a ParcelClient or ParcelServer . Inheritance System.Object ParcelSettings Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class ParcelSettings : object Remarks Each instance of ParcelSettings can only be used by 1 instance of ParcelClient or ParcelServer . The settings will be bound to the first instance they are passed to. Properties Name Description ConnectionTimeout The amount of time in milliseconds allowed for connecting to a remote user before connection times out. Debugger A NetworkDebugger instance to use for debugging. DisconnectionTimeout The amount of time in milliseconds allowed since last receiving a Packet from a user before considering them disconnected. MillisecondsPerUpdate The number of milliseconds in each update. NetworkAdapterType The type of INetworkAdapter for the ParcelClient or ParcelServer to use. Peer The Peer for the ParcelClient or ParcelServer to use. PerformUpdatesAutomatically Whether updates should be performed automatically or manually. ReliablePacketGroupSize The number of reliable packets to cluster into a single real packet. SerializerResolver The SerializerResolver for the ParcelClient or ParcelServer to use. ServerDisconnectionBehavior The behavior for handling SyncedObjects a ParcelServer should perform when a user disconnects. UnreliablePacketGroupSize The number of unreliable packets to cluster into a single real packet. UpdatesPerSecond The number of iterations of the main loop to run every seconds."
  },
  "api/Parcel.ParcelSettings.MillisecondsPerUpdate.html": {
    "href": "api/Parcel.ParcelSettings.MillisecondsPerUpdate.html",
    "title": "Property MillisecondsPerUpdate | Parcel",
    "keywords": "Property MillisecondsPerUpdate | Improve this Doc View Source MillisecondsPerUpdate The number of milliseconds in each update. Declaration public int MillisecondsPerUpdate { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.ParcelSettings.NetworkAdapterType.html": {
    "href": "api/Parcel.ParcelSettings.NetworkAdapterType.html",
    "title": "Property NetworkAdapterType | Parcel",
    "keywords": "Property NetworkAdapterType | Improve this Doc View Source NetworkAdapterType The type of INetworkAdapter for the ParcelClient or ParcelServer to use. Declaration public Type NetworkAdapterType { get; } Property Value Type Description Type"
  },
  "api/Parcel.ParcelSettings.Peer.html": {
    "href": "api/Parcel.ParcelSettings.Peer.html",
    "title": "Property Peer | Parcel",
    "keywords": "Property Peer | Improve this Doc View Source Peer The Peer for the ParcelClient or ParcelServer to use. Declaration public Peer Peer { get; } Property Value Type Description Peer"
  },
  "api/Parcel.ParcelSettings.PerformUpdatesAutomatically.html": {
    "href": "api/Parcel.ParcelSettings.PerformUpdatesAutomatically.html",
    "title": "Property PerformUpdatesAutomatically | Parcel",
    "keywords": "Property PerformUpdatesAutomatically | Improve this Doc View Source PerformUpdatesAutomatically Whether updates should be performed automatically or manually. Declaration public bool PerformUpdatesAutomatically { get; } Property Value Type Description System.Boolean Remarks If this value is false , updates will need to be performed manually by calling Loop() or Loop() ."
  },
  "api/Parcel.ParcelSettings.ReliablePacketGroupSize.html": {
    "href": "api/Parcel.ParcelSettings.ReliablePacketGroupSize.html",
    "title": "Property ReliablePacketGroupSize | Parcel",
    "keywords": "Property ReliablePacketGroupSize | Improve this Doc View Source ReliablePacketGroupSize The number of reliable packets to cluster into a single real packet. Declaration public int ReliablePacketGroupSize { get; } Property Value Type Description System.Int32 Remarks When Packets are serializing, they will be grouped together based on Reliability and be sent as a singular packet."
  },
  "api/Parcel.ParcelSettings.SerializerResolver.html": {
    "href": "api/Parcel.ParcelSettings.SerializerResolver.html",
    "title": "Property SerializerResolver | Parcel",
    "keywords": "Property SerializerResolver | Improve this Doc View Source SerializerResolver The SerializerResolver for the ParcelClient or ParcelServer to use. Declaration public SerializerResolver SerializerResolver { get; } Property Value Type Description SerializerResolver"
  },
  "api/Parcel.ParcelSettings.ServerDisconnectionBehavior.html": {
    "href": "api/Parcel.ParcelSettings.ServerDisconnectionBehavior.html",
    "title": "Property ServerDisconnectionBehavior | Parcel",
    "keywords": "Property ServerDisconnectionBehavior | Improve this Doc View Source ServerDisconnectionBehavior The behavior for handling SyncedObjects a ParcelServer should perform when a user disconnects. Declaration public ServerDisconnectionBehavior ServerDisconnectionBehavior { get; } Property Value Type Description ServerDisconnectionBehavior Remarks This setting only applies for ParcelServer instances."
  },
  "api/Parcel.ParcelSettings.UnreliablePacketGroupSize.html": {
    "href": "api/Parcel.ParcelSettings.UnreliablePacketGroupSize.html",
    "title": "Property UnreliablePacketGroupSize | Parcel",
    "keywords": "Property UnreliablePacketGroupSize | Improve this Doc View Source UnreliablePacketGroupSize The number of unreliable packets to cluster into a single real packet. Declaration public int UnreliablePacketGroupSize { get; } Property Value Type Description System.Int32 Remarks When Packets are serializing, they will be grouped together based on Reliability and be sent as a singular packet. It is recommended to keep this number small. Default is 5."
  },
  "api/Parcel.ParcelSettings.UpdatesPerSecond.html": {
    "href": "api/Parcel.ParcelSettings.UpdatesPerSecond.html",
    "title": "Property UpdatesPerSecond | Parcel",
    "keywords": "Property UpdatesPerSecond | Improve this Doc View Source UpdatesPerSecond The number of iterations of the main loop to run every seconds. Declaration public int UpdatesPerSecond { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.ParcelSettingsBuilder.AddNetworkDebugger.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.AddNetworkDebugger.html",
    "title": "Method AddNetworkDebugger | Parcel",
    "keywords": "Method AddNetworkDebugger | Improve this Doc View Source AddNetworkDebugger(NetworkDebugger) Add a NetworkDebugger instance to use for debugging. Declaration public ParcelSettingsBuilder AddNetworkDebugger(NetworkDebugger debugger) Parameters Type Name Description NetworkDebugger debugger The NetworkDebugger to use. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.-ctor.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.-ctor.html",
    "title": "Constructor ParcelSettingsBuilder | Parcel",
    "keywords": "Constructor ParcelSettingsBuilder | Improve this Doc View Source ParcelSettingsBuilder() Construct a new instance of ParcelSettingsBuilder. Declaration public ParcelSettingsBuilder()"
  },
  "api/Parcel.ParcelSettingsBuilder.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.html",
    "title": "Class ParcelSettingsBuilder | Parcel",
    "keywords": "Class ParcelSettingsBuilder Facilitates construction of a new ParcelSettings instance. Inheritance System.Object ParcelSettingsBuilder Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class ParcelSettingsBuilder : object Remarks The PeerBuilder class helps ensure proper construction of a ParcelSettings instance. Examples Construct a new ParcelSettings using the ParcelSettingsBuilder. Peer peer = new PeerBuilder().SetAddress(\"localhost\").SetPort(8181); NetworkDebugger debugger = new NetworkDebugger(new ConsoleLogger()); ParcelSettings settings = new ParcelSettingsBuilder().SetPeer(peer).SetNetworkAdapter<UdpNetworkAdapter>() .SetConnectionTimeout(5000).AddNetworkDebugger(debugger); Constructors Name Description ParcelSettingsBuilder() Construct a new instance of ParcelSettingsBuilder. Methods Name Description AddNetworkDebugger(NetworkDebugger) Add a NetworkDebugger instance to use for debugging. PerformUpdatesAutomatically(Boolean) Set whether the ParcelClient or ParcelServer should perform updates automatically or manually. SetConnectionTimeout(Int32) Set the amount of time in milliseconds allowed for connecting to a remote user before connection times out. SetDisconnectionTimeout(Int32) Set the amount of time in milliseconds allowed since last receiving a Packet from a user before considering them disconnected. SetNetworkAdapter<T>() Set the type of INetworkAdapter for the ParcelClient or ParcelServer to use. SetPeer(Peer) Set the Peer for the ParcelClient or ParcelServer to use. SetReliablePacketGroupSize(Int32) Set the number of reliable packets to cluster into a single real packet. SetSerializerResolver(SerializerResolver) Set the SerializerResolver for the ParcelClient or ParcelServer to use. SetServerDisconnectionBehavior(ServerDisconnectionBehavior) Set the behavior for handling SyncedObjects a ParcelServer should perform when a user disconnects. SetUnreliablePacketGroupSize(Int32) Set the number of unreliable packets to cluster into a single real packet. SetUpdatesPerSecond(Int32) Set the number of iterations of the main loop to run every seconds. Operators Name Description Implicit(ParcelSettingsBuilder to ParcelSettings) Implicitly convert a ParcelSettingsBuilder instance to a ParcelSettings instance."
  },
  "api/Parcel.ParcelSettingsBuilder.op_Implicit.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.op_Implicit.html",
    "title": "Operator Implicit | Parcel",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(ParcelSettingsBuilder to ParcelSettings) Implicitly convert a ParcelSettingsBuilder instance to a ParcelSettings instance. Declaration public static implicit operator ParcelSettings(ParcelSettingsBuilder builder) Parameters Type Name Description ParcelSettingsBuilder builder The ParcelSettingsBuilder to convert. Returns Type Description ParcelSettings"
  },
  "api/Parcel.ParcelSettingsBuilder.PerformUpdatesAutomatically.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.PerformUpdatesAutomatically.html",
    "title": "Method PerformUpdatesAutomatically | Parcel",
    "keywords": "Method PerformUpdatesAutomatically | Improve this Doc View Source PerformUpdatesAutomatically(Boolean) Set whether the ParcelClient or ParcelServer should perform updates automatically or manually. Declaration public ParcelSettingsBuilder PerformUpdatesAutomatically(bool should) Parameters Type Name Description System.Boolean should Whether to perform updates automatically or not. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetConnectionTimeout.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetConnectionTimeout.html",
    "title": "Method SetConnectionTimeout | Parcel",
    "keywords": "Method SetConnectionTimeout | Improve this Doc View Source SetConnectionTimeout(Int32) Set the amount of time in milliseconds allowed for connecting to a remote user before connection times out. Declaration public ParcelSettingsBuilder SetConnectionTimeout(int milliseconds) Parameters Type Name Description System.Int32 milliseconds The number of milliseconds. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetDisconnectionTimeout.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetDisconnectionTimeout.html",
    "title": "Method SetDisconnectionTimeout | Parcel",
    "keywords": "Method SetDisconnectionTimeout | Improve this Doc View Source SetDisconnectionTimeout(Int32) Set the amount of time in milliseconds allowed since last receiving a Packet from a user before considering them disconnected. Declaration public ParcelSettingsBuilder SetDisconnectionTimeout(int milliseconds) Parameters Type Name Description System.Int32 milliseconds The number of milliseconds. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetNetworkAdapter.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetNetworkAdapter.html",
    "title": "Method SetNetworkAdapter | Parcel",
    "keywords": "Method SetNetworkAdapter | Improve this Doc View Source SetNetworkAdapter<T>() Set the type of INetworkAdapter for the ParcelClient or ParcelServer to use. Declaration public ParcelSettingsBuilder SetNetworkAdapter<T>() where T : INetworkAdapter, new() Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance. Type Parameters Name Description T The type of INetworkAdapter to use."
  },
  "api/Parcel.ParcelSettingsBuilder.SetPeer.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetPeer.html",
    "title": "Method SetPeer | Parcel",
    "keywords": "Method SetPeer | Improve this Doc View Source SetPeer(Peer) Set the Peer for the ParcelClient or ParcelServer to use. Declaration public ParcelSettingsBuilder SetPeer(Peer peer) Parameters Type Name Description Peer peer The Peer to use. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetReliablePacketGroupSize.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetReliablePacketGroupSize.html",
    "title": "Method SetReliablePacketGroupSize | Parcel",
    "keywords": "Method SetReliablePacketGroupSize | Improve this Doc View Source SetReliablePacketGroupSize(Int32) Set the number of reliable packets to cluster into a single real packet. Declaration public ParcelSettingsBuilder SetReliablePacketGroupSize(int groupSize) Parameters Type Name Description System.Int32 groupSize The number of packets to cluster. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetSerializerResolver.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetSerializerResolver.html",
    "title": "Method SetSerializerResolver | Parcel",
    "keywords": "Method SetSerializerResolver | Improve this Doc View Source SetSerializerResolver(SerializerResolver) Set the SerializerResolver for the ParcelClient or ParcelServer to use. Declaration public ParcelSettingsBuilder SetSerializerResolver(SerializerResolver serializerResolver) Parameters Type Name Description SerializerResolver serializerResolver The SerializerResolver to use. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetServerDisconnectionBehavior.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetServerDisconnectionBehavior.html",
    "title": "Method SetServerDisconnectionBehavior | Parcel",
    "keywords": "Method SetServerDisconnectionBehavior | Improve this Doc View Source SetServerDisconnectionBehavior(ServerDisconnectionBehavior) Set the behavior for handling SyncedObjects a ParcelServer should perform when a user disconnects. Declaration public ParcelSettingsBuilder SetServerDisconnectionBehavior(ServerDisconnectionBehavior serverDisconnectionBehavior) Parameters Type Name Description ServerDisconnectionBehavior serverDisconnectionBehavior The behavior the ParcelServer should perform. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetUnreliablePacketGroupSize.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetUnreliablePacketGroupSize.html",
    "title": "Method SetUnreliablePacketGroupSize | Parcel",
    "keywords": "Method SetUnreliablePacketGroupSize | Improve this Doc View Source SetUnreliablePacketGroupSize(Int32) Set the number of unreliable packets to cluster into a single real packet. Declaration public ParcelSettingsBuilder SetUnreliablePacketGroupSize(int groupSize) Parameters Type Name Description System.Int32 groupSize The number of packets to cluster. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.ParcelSettingsBuilder.SetUpdatesPerSecond.html": {
    "href": "api/Parcel.ParcelSettingsBuilder.SetUpdatesPerSecond.html",
    "title": "Method SetUpdatesPerSecond | Parcel",
    "keywords": "Method SetUpdatesPerSecond | Improve this Doc View Source SetUpdatesPerSecond(Int32) Set the number of iterations of the main loop to run every seconds. Declaration public ParcelSettingsBuilder SetUpdatesPerSecond(int updates) Parameters Type Name Description System.Int32 updates The number of updates. Returns Type Description ParcelSettingsBuilder The current ParcelSettingsBuilder instance."
  },
  "api/Parcel.Peer.Address.html": {
    "href": "api/Parcel.Peer.Address.html",
    "title": "Property Address | Parcel",
    "keywords": "Property Address | Improve this Doc View Source Address The address of the Peer. Declaration public string Address { get; } Property Value Type Description System.String Remarks This property may be null depending upon the chosen network adapter's implementation."
  },
  "api/Parcel.Peer.Equals.html": {
    "href": "api/Parcel.Peer.Equals.html",
    "title": "Method Equals | Parcel",
    "keywords": "Method Equals | Improve this Doc View Source Equals(Peer) Declaration public bool Equals(Peer other) Parameters Type Name Description Peer other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean"
  },
  "api/Parcel.Peer.GetConnectionToken.html": {
    "href": "api/Parcel.Peer.GetConnectionToken.html",
    "title": "Method GetConnectionToken | Parcel",
    "keywords": "Method GetConnectionToken | Improve this Doc View Source GetConnectionToken() Get a ConnectionToken representation the this Peer's Address and Port . Declaration public ConnectionToken GetConnectionToken() Returns Type Description ConnectionToken A new ConnectionToken ."
  },
  "api/Parcel.Peer.GetEnumerator.html": {
    "href": "api/Parcel.Peer.GetEnumerator.html",
    "title": "Method GetEnumerator | Parcel",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<string, object>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < System.String , System.Object >>"
  },
  "api/Parcel.Peer.GetHashCode.html": {
    "href": "api/Parcel.Peer.GetHashCode.html",
    "title": "Method GetHashCode | Parcel",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/Parcel.Peer.GetPropertyKeys.html": {
    "href": "api/Parcel.Peer.GetPropertyKeys.html",
    "title": "Method GetPropertyKeys | Parcel",
    "keywords": "Method GetPropertyKeys | Improve this Doc View Source GetPropertyKeys() Get a collection of property keys from this Peer. Declaration public ICollection<string> GetPropertyKeys() Returns Type Description ICollection < System.String > A collection of property keys."
  },
  "api/Parcel.Peer.GetPropertyValues.html": {
    "href": "api/Parcel.Peer.GetPropertyValues.html",
    "title": "Method GetPropertyValues | Parcel",
    "keywords": "Method GetPropertyValues | Improve this Doc View Source GetPropertyValues() Get a collection of property values from this Peer. Declaration public ICollection<object> GetPropertyValues() Returns Type Description ICollection < System.Object > A collection of property values."
  },
  "api/Parcel.Peer.GUID.html": {
    "href": "api/Parcel.Peer.GUID.html",
    "title": "Property GUID | Parcel",
    "keywords": "Property GUID | Improve this Doc View Source GUID The unique identifying string of the Peer. Declaration public string GUID { get; } Property Value Type Description System.String"
  },
  "api/Parcel.Peer.html": {
    "href": "api/Parcel.Peer.html",
    "title": "Class Peer | Parcel",
    "keywords": "Class Peer Represents a local or remote user. Inheritance System.Object Peer Implements IEnumerable < KeyValuePair < System.String , System.Object >> Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class Peer : IEquatable<Peer> Remarks Peers are used for everything from establishing connections, specifying who to send a packet to, or for associating objects with a user. Note that Peers are always compared by their GUID and not by their other properties. Peers can optionally contain an Address and a Port depending on the chosen network adapter's implementation. Peers can also contain optional properties, which are string - object KeyValuePairs. Properties cannot be changed once the Peer has been constructed. Properties Name Description Address The address of the Peer. GUID The unique identifying string of the Peer. Item[String] Get a property value using key from this Peer. Port The port of the Peer. Methods Name Description Equals(Peer) Equals(Object) GetConnectionToken() Get a ConnectionToken representation the this Peer's Address and Port . GetEnumerator() GetHashCode() GetPropertyKeys() Get a collection of property keys from this Peer. GetPropertyValues() Get a collection of property values from this Peer. ToString() UpdateGUID(String) Update's the GUID of this Peer. Operators Name Description Equality(Peer, Peer) Inequality(Peer, Peer)"
  },
  "api/Parcel.Peer.Item.html": {
    "href": "api/Parcel.Peer.Item.html",
    "title": "Property Item | Parcel",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Get a property value using key from this Peer. Declaration public object this[string key] { get; } Parameters Type Name Description System.String key The key to get the value of. Property Value Type Description System.Object The value of key ."
  },
  "api/Parcel.Peer.op_Equality.html": {
    "href": "api/Parcel.Peer.op_Equality.html",
    "title": "Operator Equality | Parcel",
    "keywords": "Operator Equality | Improve this Doc View Source Equality(Peer, Peer) Declaration public static bool operator ==(Peer left, Peer right) Parameters Type Name Description Peer left Peer right Returns Type Description System.Boolean"
  },
  "api/Parcel.Peer.op_Inequality.html": {
    "href": "api/Parcel.Peer.op_Inequality.html",
    "title": "Operator Inequality | Parcel",
    "keywords": "Operator Inequality | Improve this Doc View Source Inequality(Peer, Peer) Declaration public static bool operator !=(Peer left, Peer right) Parameters Type Name Description Peer left Peer right Returns Type Description System.Boolean"
  },
  "api/Parcel.Peer.Port.html": {
    "href": "api/Parcel.Peer.Port.html",
    "title": "Property Port | Parcel",
    "keywords": "Property Port | Improve this Doc View Source Port The port of the Peer. Declaration public int Port { get; } Property Value Type Description System.Int32 Remarks This property's value may be langword_csharp_0 depending upon the chosen network adapter's implementation."
  },
  "api/Parcel.Peer.ToString.html": {
    "href": "api/Parcel.Peer.ToString.html",
    "title": "Method ToString | Parcel",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Parcel.Peer.UpdateGUID.html": {
    "href": "api/Parcel.Peer.UpdateGUID.html",
    "title": "Method UpdateGUID | Parcel",
    "keywords": "Method UpdateGUID | Improve this Doc View Source UpdateGUID(String) Update's the GUID of this Peer. Declaration public void UpdateGUID(string guid) Parameters Type Name Description System.String guid The new GUID. Remarks Warning: This method was made public only for use by user-made network adapters. Calling this method improperly can cause unexpected behaviour."
  },
  "api/Parcel.PeerBuilder.AddProperty.html": {
    "href": "api/Parcel.PeerBuilder.AddProperty.html",
    "title": "Method AddProperty | Parcel",
    "keywords": "Method AddProperty | Improve this Doc View Source AddProperty(String, Object) Add a property to the Peer bring constructed. Declaration public PeerBuilder AddProperty(string key, object value) Parameters Type Name Description System.String key The key of the property. System.Object value The value of the property. Returns Type Description PeerBuilder The current PeerBuilder instance."
  },
  "api/Parcel.PeerBuilder.-ctor.html": {
    "href": "api/Parcel.PeerBuilder.-ctor.html",
    "title": "Constructor PeerBuilder | Parcel",
    "keywords": "Constructor PeerBuilder | Improve this Doc View Source PeerBuilder() Construct a new instance of PeerBuilder. Declaration public PeerBuilder()"
  },
  "api/Parcel.PeerBuilder.html": {
    "href": "api/Parcel.PeerBuilder.html",
    "title": "Class PeerBuilder | Parcel",
    "keywords": "Class PeerBuilder Facilitates construction of a new Peer instance. Inheritance System.Object PeerBuilder Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class PeerBuilder : object Remarks The PeerBuilder class helps ensure proper construction of a Peer instance. Examples Construct a new Peer using the PeerBuilder. Peer examplePeer = new PeerBuilder().SetAddress(\"localhost\").SetPort(8181) .AddProperty(\"name\", \"myUsername\").AddProperty(\"class\", CharacterClass.Mage); Constructors Name Description PeerBuilder() Construct a new instance of PeerBuilder. Methods Name Description AddProperty(String, Object) Add a property to the Peer bring constructed. SetAddress(String) Set the Address of the Peer being constructed. SetGUID(String) Set the GUID of the Peer being constructed. SetPort(Int32) Set the Port of the Peer being constructed. SetProperties(Dictionary<String, Object>) Set the properties of the Peer being constructed. UsePublicAddress() Set the Address of the Peer being constructed to the current network's public IP address. Operators Name Description Implicit(PeerBuilder to Peer) Implicitly convert a PeerBuilder instance to a Peer instance."
  },
  "api/Parcel.PeerBuilder.op_Implicit.html": {
    "href": "api/Parcel.PeerBuilder.op_Implicit.html",
    "title": "Operator Implicit | Parcel",
    "keywords": "Operator Implicit | Improve this Doc View Source Implicit(PeerBuilder to Peer) Implicitly convert a PeerBuilder instance to a Peer instance. Declaration public static implicit operator Peer(PeerBuilder builder) Parameters Type Name Description PeerBuilder builder The PeerBuilder to convert. Returns Type Description Peer"
  },
  "api/Parcel.PeerBuilder.SetAddress.html": {
    "href": "api/Parcel.PeerBuilder.SetAddress.html",
    "title": "Method SetAddress | Parcel",
    "keywords": "Method SetAddress | Improve this Doc View Source SetAddress(String) Set the Address of the Peer being constructed. Declaration public PeerBuilder SetAddress(string address) Parameters Type Name Description System.String address The Address to use. Returns Type Description PeerBuilder The current PeerBuilder instance."
  },
  "api/Parcel.PeerBuilder.SetGUID.html": {
    "href": "api/Parcel.PeerBuilder.SetGUID.html",
    "title": "Method SetGUID | Parcel",
    "keywords": "Method SetGUID | Improve this Doc View Source SetGUID(String) Set the GUID of the Peer being constructed. Declaration public PeerBuilder SetGUID(string guid) Parameters Type Name Description System.String guid The GUID to use. Returns Type Description PeerBuilder The current PeerBuilder instance."
  },
  "api/Parcel.PeerBuilder.SetPort.html": {
    "href": "api/Parcel.PeerBuilder.SetPort.html",
    "title": "Method SetPort | Parcel",
    "keywords": "Method SetPort | Improve this Doc View Source SetPort(Int32) Set the Port of the Peer being constructed. Declaration public PeerBuilder SetPort(int port) Parameters Type Name Description System.Int32 port The Port to use. Returns Type Description PeerBuilder The current PeerBuilder instance."
  },
  "api/Parcel.PeerBuilder.SetProperties.html": {
    "href": "api/Parcel.PeerBuilder.SetProperties.html",
    "title": "Method SetProperties | Parcel",
    "keywords": "Method SetProperties | Improve this Doc View Source SetProperties(Dictionary<String, Object>) Set the properties of the Peer being constructed. Declaration public PeerBuilder SetProperties(Dictionary<string, object> properties) Parameters Type Name Description Dictionary < System.String , System.Object > properties The properties to use. Returns Type Description PeerBuilder The current PeerBuilder instance."
  },
  "api/Parcel.PeerBuilder.UsePublicAddress.html": {
    "href": "api/Parcel.PeerBuilder.UsePublicAddress.html",
    "title": "Method UsePublicAddress | Parcel",
    "keywords": "Method UsePublicAddress | Improve this Doc View Source UsePublicAddress() Set the Address of the Peer being constructed to the current network's public IP address. Declaration public PeerBuilder UsePublicAddress() Returns Type Description PeerBuilder The current PeerBuilder instance."
  },
  "api/Parcel.ReliableAttribute.html": {
    "href": "api/Parcel.ReliableAttribute.html",
    "title": "Class ReliableAttribute | Parcel",
    "keywords": "Class ReliableAttribute Specifies that a Packet or property within a SyncedObject is considered reliable. Inheritance System.Object ReliableAttribute Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class ReliableAttribute : Attribute Remarks When a packet or property is reliable, this indicates that the packet or property is guaranteed to be received in order of sending by remote users."
  },
  "api/Parcel.Serialization.ByteReader.-ctor.html": {
    "href": "api/Parcel.Serialization.ByteReader.-ctor.html",
    "title": "Constructor ByteReader | Parcel",
    "keywords": "Constructor ByteReader | Improve this Doc View Source ByteReader(Byte[], SerializerResolver) Construct a new instance of ByteReader. Declaration public ByteReader(byte[] data, SerializerResolver serializerResolver = null) Parameters Type Name Description System.Byte [] data The array of bytes to read from. SerializerResolver serializerResolver The SerializerResolver to use."
  },
  "api/Parcel.Serialization.ByteReader.html": {
    "href": "api/Parcel.Serialization.ByteReader.html",
    "title": "Class ByteReader | Parcel",
    "keywords": "Class ByteReader Facilitates the reading of primitives and objects to an array of bytes. Inheritance System.Object ByteReader Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public sealed class ByteReader : object Constructors Name Description ByteReader(Byte[], SerializerResolver) Construct a new instance of ByteReader. Properties Name Description Length Get the length of the internal data stream. Position Get the current position of the ByteReader. SerializerResolver The SerializerResolver used within this ByteReader. Methods Name Description ReadBool() Read the next bool in the ByteReader. ReadBoolArray() Read the next array of bools in the ByteReader. ReadByte() Read the next byte in the ByteReader. ReadByteArray() Read the next array of bytes in the ByteReader. ReadChar() Read the next char in the ByteReader. ReadCharArray() Read the next array of chars in the ByteReader. ReadDecimal() Read the next decimal in the ByteReader. ReadDecimalArray() Read the next array of decimals in the ByteReader. ReadDouble() Read the next double in the ByteReader. ReadDoubleArray() Read the next array of doubles in the ByteReader. ReadEnum(Type) Read the next Ehar in the ByteReader. ReadEnum<T>() Read the next Enum in the ByteReader. ReadFloat() Read the next float in the ByteReader. ReadFloatArray() Read the next array of floats in the ByteReader. ReadInt() Read the next int in the ByteReader. ReadIntArray() Read the next array of ints in the ByteReader. ReadLong() Read the next long in the ByteReader. ReadLongArray() Read the next array of longs in the ByteReader. ReadObject() Read the next object in the ByteReader. ReadObject<T>() Read the next object in the ByteReader. ReadSByte() Read the next sbyte in the ByteReader. ReadSByteArray() Read the next array of sbytes in the ByteReader. ReadShort() Read the next short in the ByteReader. ReadShortArray() Read the next array of shorts in the ByteReader. ReadString() Read the next string in the ByteReader. ReadUInt() Read the next uint in the ByteReader. ReadUIntArray() Read the next array of uints in the ByteReader. ReadULong() Read the next ulong in the ByteReader. ReadULongArray() Read the next array of ulongs in the ByteReader. ReadUShort() Read the next ushort in the ByteReader. ReadUShortArray() Read the next array of ushorts in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.Length.html": {
    "href": "api/Parcel.Serialization.ByteReader.Length.html",
    "title": "Property Length | Parcel",
    "keywords": "Property Length | Improve this Doc View Source Length Get the length of the internal data stream. Declaration public int Length { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.Serialization.ByteReader.Position.html": {
    "href": "api/Parcel.Serialization.ByteReader.Position.html",
    "title": "Property Position | Parcel",
    "keywords": "Property Position | Improve this Doc View Source Position Get the current position of the ByteReader. Declaration public int Position { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.Serialization.ByteReader.ReadBool.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadBool.html",
    "title": "Method ReadBool | Parcel",
    "keywords": "Method ReadBool | Improve this Doc View Source ReadBool() Read the next bool in the ByteReader. Declaration public bool ReadBool() Returns Type Description System.Boolean The next bool in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadBoolArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadBoolArray.html",
    "title": "Method ReadBoolArray | Parcel",
    "keywords": "Method ReadBoolArray | Improve this Doc View Source ReadBoolArray() Read the next array of bools in the ByteReader. Declaration public bool[] ReadBoolArray() Returns Type Description System.Boolean [] The next array of bools in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadByte.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadByte.html",
    "title": "Method ReadByte | Parcel",
    "keywords": "Method ReadByte | Improve this Doc View Source ReadByte() Read the next byte in the ByteReader. Declaration public byte ReadByte() Returns Type Description System.Byte The next byte in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadByteArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadByteArray.html",
    "title": "Method ReadByteArray | Parcel",
    "keywords": "Method ReadByteArray | Improve this Doc View Source ReadByteArray() Read the next array of bytes in the ByteReader. Declaration public byte[] ReadByteArray() Returns Type Description System.Byte [] The next array of bytes in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadChar.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadChar.html",
    "title": "Method ReadChar | Parcel",
    "keywords": "Method ReadChar | Improve this Doc View Source ReadChar() Read the next char in the ByteReader. Declaration public char ReadChar() Returns Type Description System.Char The next char in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadCharArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadCharArray.html",
    "title": "Method ReadCharArray | Parcel",
    "keywords": "Method ReadCharArray | Improve this Doc View Source ReadCharArray() Read the next array of chars in the ByteReader. Declaration public char[] ReadCharArray() Returns Type Description System.Char [] The next array of chars in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadDecimal.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadDecimal.html",
    "title": "Method ReadDecimal | Parcel",
    "keywords": "Method ReadDecimal | Improve this Doc View Source ReadDecimal() Read the next decimal in the ByteReader. Declaration public decimal ReadDecimal() Returns Type Description System.Decimal The next decimal in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadDecimalArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadDecimalArray.html",
    "title": "Method ReadDecimalArray | Parcel",
    "keywords": "Method ReadDecimalArray | Improve this Doc View Source ReadDecimalArray() Read the next array of decimals in the ByteReader. Declaration public decimal[] ReadDecimalArray() Returns Type Description System.Decimal [] The next array of decimals in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadDouble.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadDouble.html",
    "title": "Method ReadDouble | Parcel",
    "keywords": "Method ReadDouble | Improve this Doc View Source ReadDouble() Read the next double in the ByteReader. Declaration public double ReadDouble() Returns Type Description System.Double The next double in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadDoubleArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadDoubleArray.html",
    "title": "Method ReadDoubleArray | Parcel",
    "keywords": "Method ReadDoubleArray | Improve this Doc View Source ReadDoubleArray() Read the next array of doubles in the ByteReader. Declaration public double[] ReadDoubleArray() Returns Type Description System.Double [] The next array of doubles in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadEnum.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadEnum.html",
    "title": "Method ReadEnum | Parcel",
    "keywords": "Method ReadEnum | Improve this Doc View Source ReadEnum(Type) Read the next Ehar in the ByteReader. Declaration public Enum ReadEnum(Type enumType) Parameters Type Name Description Type enumType The Type of the Enum to read. Returns Type Description Enum The next Ehar in the ByteReader. | Improve this Doc View Source ReadEnum<T>() Read the next Enum in the ByteReader. Declaration public T ReadEnum<T>() where T : Enum Returns Type Description T The next Ehar in the ByteReader. Type Parameters Name Description T The Type of the Enum to read."
  },
  "api/Parcel.Serialization.ByteReader.ReadFloat.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadFloat.html",
    "title": "Method ReadFloat | Parcel",
    "keywords": "Method ReadFloat | Improve this Doc View Source ReadFloat() Read the next float in the ByteReader. Declaration public float ReadFloat() Returns Type Description System.Single The next float in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadFloatArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadFloatArray.html",
    "title": "Method ReadFloatArray | Parcel",
    "keywords": "Method ReadFloatArray | Improve this Doc View Source ReadFloatArray() Read the next array of floats in the ByteReader. Declaration public float[] ReadFloatArray() Returns Type Description System.Single [] The next array of floats in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadInt.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadInt.html",
    "title": "Method ReadInt | Parcel",
    "keywords": "Method ReadInt | Improve this Doc View Source ReadInt() Read the next int in the ByteReader. Declaration public int ReadInt() Returns Type Description System.Int32 The next int in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadIntArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadIntArray.html",
    "title": "Method ReadIntArray | Parcel",
    "keywords": "Method ReadIntArray | Improve this Doc View Source ReadIntArray() Read the next array of ints in the ByteReader. Declaration public int[] ReadIntArray() Returns Type Description System.Int32 [] The next array of ints in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadLong.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadLong.html",
    "title": "Method ReadLong | Parcel",
    "keywords": "Method ReadLong | Improve this Doc View Source ReadLong() Read the next long in the ByteReader. Declaration public long ReadLong() Returns Type Description System.Int64 The next long in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadLongArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadLongArray.html",
    "title": "Method ReadLongArray | Parcel",
    "keywords": "Method ReadLongArray | Improve this Doc View Source ReadLongArray() Read the next array of longs in the ByteReader. Declaration public long[] ReadLongArray() Returns Type Description System.Int64 [] The next array of longs in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadObject.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadObject.html",
    "title": "Method ReadObject | Parcel",
    "keywords": "Method ReadObject | Improve this Doc View Source ReadObject() Read the next object in the ByteReader. Declaration public object ReadObject() Returns Type Description System.Object The next object in the ByteReader. | Improve this Doc View Source ReadObject<T>() Read the next object in the ByteReader. Declaration public T ReadObject<T>() Returns Type Description T The next object in the ByteReader. Type Parameters Name Description T The Type of the object to read."
  },
  "api/Parcel.Serialization.ByteReader.ReadSByte.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadSByte.html",
    "title": "Method ReadSByte | Parcel",
    "keywords": "Method ReadSByte | Improve this Doc View Source ReadSByte() Read the next sbyte in the ByteReader. Declaration public sbyte ReadSByte() Returns Type Description System.SByte The next sbyte in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadSByteArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadSByteArray.html",
    "title": "Method ReadSByteArray | Parcel",
    "keywords": "Method ReadSByteArray | Improve this Doc View Source ReadSByteArray() Read the next array of sbytes in the ByteReader. Declaration public sbyte[] ReadSByteArray() Returns Type Description System.SByte [] The next array of sbytes in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadShort.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadShort.html",
    "title": "Method ReadShort | Parcel",
    "keywords": "Method ReadShort | Improve this Doc View Source ReadShort() Read the next short in the ByteReader. Declaration public short ReadShort() Returns Type Description System.Int16 The next short in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadShortArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadShortArray.html",
    "title": "Method ReadShortArray | Parcel",
    "keywords": "Method ReadShortArray | Improve this Doc View Source ReadShortArray() Read the next array of shorts in the ByteReader. Declaration public short[] ReadShortArray() Returns Type Description System.Int16 [] The next array of shorts in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadString.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadString.html",
    "title": "Method ReadString | Parcel",
    "keywords": "Method ReadString | Improve this Doc View Source ReadString() Read the next string in the ByteReader. Declaration public string ReadString() Returns Type Description System.String The next string in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadUInt.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadUInt.html",
    "title": "Method ReadUInt | Parcel",
    "keywords": "Method ReadUInt | Improve this Doc View Source ReadUInt() Read the next uint in the ByteReader. Declaration public uint ReadUInt() Returns Type Description System.UInt32 The next uint in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadUIntArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadUIntArray.html",
    "title": "Method ReadUIntArray | Parcel",
    "keywords": "Method ReadUIntArray | Improve this Doc View Source ReadUIntArray() Read the next array of uints in the ByteReader. Declaration public uint[] ReadUIntArray() Returns Type Description System.UInt32 [] The next array of uints in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadULong.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadULong.html",
    "title": "Method ReadULong | Parcel",
    "keywords": "Method ReadULong | Improve this Doc View Source ReadULong() Read the next ulong in the ByteReader. Declaration public ulong ReadULong() Returns Type Description System.UInt64 The next ulong in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadULongArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadULongArray.html",
    "title": "Method ReadULongArray | Parcel",
    "keywords": "Method ReadULongArray | Improve this Doc View Source ReadULongArray() Read the next array of ulongs in the ByteReader. Declaration public ulong[] ReadULongArray() Returns Type Description System.UInt64 [] The next array of ulongs in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadUShort.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadUShort.html",
    "title": "Method ReadUShort | Parcel",
    "keywords": "Method ReadUShort | Improve this Doc View Source ReadUShort() Read the next ushort in the ByteReader. Declaration public ushort ReadUShort() Returns Type Description System.UInt16 The next ushort in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.ReadUShortArray.html": {
    "href": "api/Parcel.Serialization.ByteReader.ReadUShortArray.html",
    "title": "Method ReadUShortArray | Parcel",
    "keywords": "Method ReadUShortArray | Improve this Doc View Source ReadUShortArray() Read the next array of ushorts in the ByteReader. Declaration public ushort[] ReadUShortArray() Returns Type Description System.UInt16 [] The next array of ushorts in the ByteReader."
  },
  "api/Parcel.Serialization.ByteReader.SerializerResolver.html": {
    "href": "api/Parcel.Serialization.ByteReader.SerializerResolver.html",
    "title": "Property SerializerResolver | Parcel",
    "keywords": "Property SerializerResolver | Improve this Doc View Source SerializerResolver The SerializerResolver used within this ByteReader. Declaration public SerializerResolver SerializerResolver { get; } Property Value Type Description SerializerResolver"
  },
  "api/Parcel.Serialization.ByteWriter.-ctor.html": {
    "href": "api/Parcel.Serialization.ByteWriter.-ctor.html",
    "title": "Constructor ByteWriter | Parcel",
    "keywords": "Constructor ByteWriter | Improve this Doc View Source ByteWriter(SerializerResolver) Construct a new instance of ByteWriter. Declaration public ByteWriter(SerializerResolver serializerResolver = null) Parameters Type Name Description SerializerResolver serializerResolver The SerializerResolver to use."
  },
  "api/Parcel.Serialization.ByteWriter.Data.html": {
    "href": "api/Parcel.Serialization.ByteWriter.Data.html",
    "title": "Property Data | Parcel",
    "keywords": "Property Data | Improve this Doc View Source Data Get a copy of the data written to the ByteWriter. Declaration public byte[] Data { get; } Property Value Type Description System.Byte []"
  },
  "api/Parcel.Serialization.ByteWriter.html": {
    "href": "api/Parcel.Serialization.ByteWriter.html",
    "title": "Class ByteWriter | Parcel",
    "keywords": "Class ByteWriter Facilitates the writing of primitives and objects to an array of bytes. Inheritance System.Object ByteWriter Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public sealed class ByteWriter : object Constructors Name Description ByteWriter(SerializerResolver) Construct a new instance of ByteWriter. Properties Name Description Data Get a copy of the data written to the ByteWriter. Length Get the current length of the internal data stream. Position Get the current position of the internal data stream. SerializerResolver The SerializerResolver used within this ByteWriter. Methods Name Description Write(Enum) Write an Enum to the ByteWriter. Write(Enum, Int32) Write an Enum to the ByteWriter. Write(Boolean) Write a bool to the ByteWriter. Write(Boolean, Int32) Write a bool to the ByteWriter. Write(Boolean[]) Write an array of bools to the ByteWriter. Write(Boolean[], Int32) Write an array of bools to the ByteWriter. Write(Byte) Write a byte to the ByteWriter. Write(Byte, Int32) Write a byte to the ByteWriter. Write(Byte[]) Write an array of bytes to the ByteWriter. Write(Byte[], Int32) Write an array of bytes to the ByteWriter. Write(Char) Write a char to the ByteWriter. Write(Char, Int32) Write a char to the ByteWriter. Write(Char[]) Write an array of chars to the ByteWriter. Write(Char[], Int32) Write an array of chars to the ByteWriter. Write(Decimal) Write a decimal to the ByteWriter. Write(Decimal, Int32) Write a decimal to the ByteWriter. Write(Decimal[]) Write an array of decimals to the ByteWriter. Write(Decimal[], Int32) Write an array of decimals to the ByteWriter. Write(Double) Write a double to the ByteWriter. Write(Double, Int32) Write a double to the ByteWriter. Write(Double[]) Write an array of doubles to the ByteWriter. Write(Double[], Int32) Write an array of doubles to the ByteWriter. Write(Int16) Write a short to the ByteWriter. Write(Int16, Int32) Write a short to the ByteWriter. Write(Int16[]) Write an array of shorts to the ByteWriter. Write(Int16[], Int32) Write an array of shorts to the ByteWriter. Write(Int32) Write an int to the ByteWriter. Write(Int32, Int32) Write an int to the ByteWriter. Write(Int32[]) Write an array of ints to the ByteWriter. Write(Int32[], Int32) Write an array of ints to the ByteWriter. Write(Int64) Write a long to the ByteWriter. Write(Int64, Int32) Write a long to the ByteWriter. Write(Int64[]) Write an array of longs to the ByteWriter. Write(Int64[], Int32) Write an array of longs to the ByteWriter. Write(Object) Write an object to the ByteWriter. Write(SByte) Write an sbyte to the ByteWriter. Write(SByte, Int32) Write an sbyte to the ByteWriter. Write(SByte[]) Write an array of sbytes to the ByteWriter. Write(SByte[], Int32) Write an array of sbytes to the ByteWriter. Write(Single) Write a float to the ByteWriter. Write(Single, Int32) Write a float to the ByteWriter. Write(Single[]) Write an array of floats to the ByteWriter. Write(Single[], Int32) Write an array of floats to the ByteWriter. Write(String) Write a string to the ByteWriter. Write(String, Int32) Write a string to the ByteWriter. Write(UInt16) Write a ushort to the ByteWriter. Write(UInt16, Int32) Write a ushort to the ByteWriter. Write(UInt16[]) Write an array of ushorts to the ByteWriter. Write(UInt16[], Int32) Write an array of ushorts to the ByteWriter. Write(UInt32) Write a uint to the ByteWriter. Write(UInt32, Int32) Write a uint to the ByteWriter. Write(UInt32[]) Write an array of uints to the ByteWriter. Write(UInt32[], Int32) Write an array of uints to the ByteWriter. Write(UInt64) Write a ulong to the ByteWriter. Write(UInt64, Int32) Write a ulong to the ByteWriter. Write(UInt64[]) Write an array of ulongs to the ByteWriter. Write(UInt64[], Int32) Write an array of ulongs to the ByteWriter."
  },
  "api/Parcel.Serialization.ByteWriter.Length.html": {
    "href": "api/Parcel.Serialization.ByteWriter.Length.html",
    "title": "Property Length | Parcel",
    "keywords": "Property Length | Improve this Doc View Source Length Get the current length of the internal data stream. Declaration public int Length { get; } Property Value Type Description System.Int32 Remarks The Length and Position Properties will produce the same value. Two different Properties exist purely for code clarity."
  },
  "api/Parcel.Serialization.ByteWriter.Position.html": {
    "href": "api/Parcel.Serialization.ByteWriter.Position.html",
    "title": "Property Position | Parcel",
    "keywords": "Property Position | Improve this Doc View Source Position Get the current position of the internal data stream. Declaration public int Position { get; } Property Value Type Description System.Int32 Remarks The Length and Position Properties will produce the same value. Two different Properties exist purely for code clarity."
  },
  "api/Parcel.Serialization.ByteWriter.SerializerResolver.html": {
    "href": "api/Parcel.Serialization.ByteWriter.SerializerResolver.html",
    "title": "Property SerializerResolver | Parcel",
    "keywords": "Property SerializerResolver | Improve this Doc View Source SerializerResolver The SerializerResolver used within this ByteWriter. Declaration public SerializerResolver SerializerResolver { get; } Property Value Type Description SerializerResolver"
  },
  "api/Parcel.Serialization.ByteWriter.Write.html": {
    "href": "api/Parcel.Serialization.ByteWriter.Write.html",
    "title": "Method Write | Parcel",
    "keywords": "Method Write | Improve this Doc View Source Write(Byte) Write a byte to the ByteWriter. Declaration public void Write(byte b) Parameters Type Name Description System.Byte b The byte to write. | Improve this Doc View Source Write(Byte, Int32) Write a byte to the ByteWriter. Declaration public void Write(byte b, int position) Parameters Type Name Description System.Byte b The byte to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(SByte) Write an sbyte to the ByteWriter. Declaration public void Write(sbyte b) Parameters Type Name Description System.SByte b The sbyte to write. | Improve this Doc View Source Write(SByte, Int32) Write an sbyte to the ByteWriter. Declaration public void Write(sbyte b, int position) Parameters Type Name Description System.SByte b The sbyte to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Int16) Write a short to the ByteWriter. Declaration public void Write(short s) Parameters Type Name Description System.Int16 s The short to write. | Improve this Doc View Source Write(Int16, Int32) Write a short to the ByteWriter. Declaration public void Write(short s, int position) Parameters Type Name Description System.Int16 s The short to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(UInt16) Write a ushort to the ByteWriter. Declaration public void Write(ushort s) Parameters Type Name Description System.UInt16 s The ushort to write. | Improve this Doc View Source Write(UInt16, Int32) Write a ushort to the ByteWriter. Declaration public void Write(ushort s, int position) Parameters Type Name Description System.UInt16 s The ushort to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Int32) Write an int to the ByteWriter. Declaration public void Write(int i) Parameters Type Name Description System.Int32 i The int to write. | Improve this Doc View Source Write(Int32, Int32) Write an int to the ByteWriter. Declaration public void Write(int i, int position) Parameters Type Name Description System.Int32 i The int to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(UInt32) Write a uint to the ByteWriter. Declaration public void Write(uint i) Parameters Type Name Description System.UInt32 i The uint to write. | Improve this Doc View Source Write(UInt32, Int32) Write a uint to the ByteWriter. Declaration public void Write(uint i, int position) Parameters Type Name Description System.UInt32 i The uint to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Int64) Write a long to the ByteWriter. Declaration public void Write(long l) Parameters Type Name Description System.Int64 l The long to write. | Improve this Doc View Source Write(Int64, Int32) Write a long to the ByteWriter. Declaration public void Write(long l, int position) Parameters Type Name Description System.Int64 l The long to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(UInt64) Write a ulong to the ByteWriter. Declaration public void Write(ulong l) Parameters Type Name Description System.UInt64 l The ulong to write. | Improve this Doc View Source Write(UInt64, Int32) Write a ulong to the ByteWriter. Declaration public void Write(ulong l, int position) Parameters Type Name Description System.UInt64 l The ulong to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Single) Write a float to the ByteWriter. Declaration public void Write(float f) Parameters Type Name Description System.Single f The float to write. | Improve this Doc View Source Write(Single, Int32) Write a float to the ByteWriter. Declaration public void Write(float f, int position) Parameters Type Name Description System.Single f The float to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Double) Write a double to the ByteWriter. Declaration public void Write(double d) Parameters Type Name Description System.Double d The double to write. | Improve this Doc View Source Write(Double, Int32) Write a double to the ByteWriter. Declaration public void Write(double d, int position) Parameters Type Name Description System.Double d The double to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Decimal) Write a decimal to the ByteWriter. Declaration public void Write(decimal d) Parameters Type Name Description System.Decimal d The decimal to write. | Improve this Doc View Source Write(Decimal, Int32) Write a decimal to the ByteWriter. Declaration public void Write(decimal d, int position) Parameters Type Name Description System.Decimal d The decimal to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Boolean) Write a bool to the ByteWriter. Declaration public void Write(bool b) Parameters Type Name Description System.Boolean b The bool to write. | Improve this Doc View Source Write(Boolean, Int32) Write a bool to the ByteWriter. Declaration public void Write(bool b, int position) Parameters Type Name Description System.Boolean b The bool to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Char) Write a char to the ByteWriter. Declaration public void Write(char c) Parameters Type Name Description System.Char c The char to write. | Improve this Doc View Source Write(Char, Int32) Write a char to the ByteWriter. Declaration public void Write(char c, int position) Parameters Type Name Description System.Char c The char to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Byte[]) Write an array of bytes to the ByteWriter. Declaration public void Write(byte[] b) Parameters Type Name Description System.Byte [] b The array of bytes to write. | Improve this Doc View Source Write(Byte[], Int32) Write an array of bytes to the ByteWriter. Declaration public void Write(byte[] b, int position) Parameters Type Name Description System.Byte [] b The array of bytes to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(SByte[]) Write an array of sbytes to the ByteWriter. Declaration public void Write(sbyte[] b) Parameters Type Name Description System.SByte [] b The array of sbytes to write. | Improve this Doc View Source Write(SByte[], Int32) Write an array of sbytes to the ByteWriter. Declaration public void Write(sbyte[] b, int position) Parameters Type Name Description System.SByte [] b The array of sbytes to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Int16[]) Write an array of shorts to the ByteWriter. Declaration public void Write(short[] s) Parameters Type Name Description System.Int16 [] s The array of shorts to write. | Improve this Doc View Source Write(Int16[], Int32) Write an array of shorts to the ByteWriter. Declaration public void Write(short[] s, int position) Parameters Type Name Description System.Int16 [] s The array of shorts to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(UInt16[]) Write an array of ushorts to the ByteWriter. Declaration public void Write(ushort[] s) Parameters Type Name Description System.UInt16 [] s The array of ushort to write. | Improve this Doc View Source Write(UInt16[], Int32) Write an array of ushorts to the ByteWriter. Declaration public void Write(ushort[] s, int position) Parameters Type Name Description System.UInt16 [] s The array of ushorts to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Int32[]) Write an array of ints to the ByteWriter. Declaration public void Write(int[] i) Parameters Type Name Description System.Int32 [] i The array of ints to write. | Improve this Doc View Source Write(Int32[], Int32) Write an array of ints to the ByteWriter. Declaration public void Write(int[] i, int position) Parameters Type Name Description System.Int32 [] i The array of ints to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(UInt32[]) Write an array of uints to the ByteWriter. Declaration public void Write(uint[] i) Parameters Type Name Description System.UInt32 [] i The array of uints to write. | Improve this Doc View Source Write(UInt32[], Int32) Write an array of uints to the ByteWriter. Declaration public void Write(uint[] i, int position) Parameters Type Name Description System.UInt32 [] i The array of uints to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Int64[]) Write an array of longs to the ByteWriter. Declaration public void Write(long[] l) Parameters Type Name Description System.Int64 [] l The array of longs to write. | Improve this Doc View Source Write(Int64[], Int32) Write an array of longs to the ByteWriter. Declaration public void Write(long[] l, int position) Parameters Type Name Description System.Int64 [] l The array of longs to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(UInt64[]) Write an array of ulongs to the ByteWriter. Declaration public void Write(ulong[] l) Parameters Type Name Description System.UInt64 [] l The array of ulongs to write. | Improve this Doc View Source Write(UInt64[], Int32) Write an array of ulongs to the ByteWriter. Declaration public void Write(ulong[] l, int position) Parameters Type Name Description System.UInt64 [] l The array of ulongs to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Single[]) Write an array of floats to the ByteWriter. Declaration public void Write(float[] f) Parameters Type Name Description System.Single [] f The array of floats to write. | Improve this Doc View Source Write(Single[], Int32) Write an array of floats to the ByteWriter. Declaration public void Write(float[] f, int position) Parameters Type Name Description System.Single [] f The array of floats to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Double[]) Write an array of doubles to the ByteWriter. Declaration public void Write(double[] d) Parameters Type Name Description System.Double [] d The array of doubles to write. | Improve this Doc View Source Write(Double[], Int32) Write an array of doubles to the ByteWriter. Declaration public void Write(double[] d, int position) Parameters Type Name Description System.Double [] d The array of doubles to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Decimal[]) Write an array of decimals to the ByteWriter. Declaration public void Write(decimal[] d) Parameters Type Name Description System.Decimal [] d The array of decimals to write. | Improve this Doc View Source Write(Decimal[], Int32) Write an array of decimals to the ByteWriter. Declaration public void Write(decimal[] d, int position) Parameters Type Name Description System.Decimal [] d The array of decimals to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Boolean[]) Write an array of bools to the ByteWriter. Declaration public void Write(bool[] b) Parameters Type Name Description System.Boolean [] b The array of bools to write. | Improve this Doc View Source Write(Boolean[], Int32) Write an array of bools to the ByteWriter. Declaration public void Write(bool[] b, int position) Parameters Type Name Description System.Boolean [] b The array of bools to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Char[]) Write an array of chars to the ByteWriter. Declaration public void Write(char[] c) Parameters Type Name Description System.Char [] c The array of chars to write. | Improve this Doc View Source Write(Char[], Int32) Write an array of chars to the ByteWriter. Declaration public void Write(char[] c, int position) Parameters Type Name Description System.Char [] c The array of chars to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(String) Write a string to the ByteWriter. Declaration public void Write(string s) Parameters Type Name Description System.String s The string to write. | Improve this Doc View Source Write(String, Int32) Write a string to the ByteWriter. Declaration public void Write(string s, int position) Parameters Type Name Description System.String s The string to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Enum) Write an Enum to the ByteWriter. Declaration public void Write(Enum e) Parameters Type Name Description Enum e The Enum to write. | Improve this Doc View Source Write(Enum, Int32) Write an Enum to the ByteWriter. Declaration public void Write(Enum e, int position) Parameters Type Name Description Enum e The Enum to write. System.Int32 position The position within the ByteWriter to write to. | Improve this Doc View Source Write(Object) Write an object to the ByteWriter. Declaration public void Write(object obj) Parameters Type Name Description System.Object obj The object to write."
  },
  "api/Parcel.Serialization.html": {
    "href": "api/Parcel.Serialization.html",
    "title": "Namespace Parcel.Serialization | Parcel",
    "keywords": "Namespace Parcel.Serialization Classes ByteReader Facilitates the reading of primitives and objects to an array of bytes. ByteWriter Facilitates the writing of primitives and objects to an array of bytes. IgnoreAttribute Specifies that a member of a class should be ignored during serialization. ObjectCache Represents a collection of useful information for serialization purposes about a Type. ObjectProperty Represents a collection of useful information for serialization purposes about a Property. OptInAttribute Specifies that during serialization, a class should opt-in members for serialization using the Encode Attribute. OptOutAttribute Specifies that during serialization, a class should opt-out members from serialization using the Ignore Attribute. SerializeAttribute Specifies that a member of a class should be encoded during serialization. Serializer Base class for all Serializers. SerializerResolver Stored a collection of Serializers and resolves which Serializers should be used for each Type. TypeHashCode Represents a reversible hashcode for Types."
  },
  "api/Parcel.Serialization.IgnoreAttribute.html": {
    "href": "api/Parcel.Serialization.IgnoreAttribute.html",
    "title": "Class IgnoreAttribute | Parcel",
    "keywords": "Class IgnoreAttribute Specifies that a member of a class should be ignored during serialization. Inheritance System.Object IgnoreAttribute Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public class IgnoreAttribute : Attribute"
  },
  "api/Parcel.Serialization.ObjectCache.FromHash.html": {
    "href": "api/Parcel.Serialization.ObjectCache.FromHash.html",
    "title": "Method FromHash | Parcel",
    "keywords": "Method FromHash | Improve this Doc View Source FromHash(TypeHashCode) Get or construct an ObjectCache instance from a TypeHashCode . Declaration public static ObjectCache FromHash(TypeHashCode hash) Parameters Type Name Description TypeHashCode hash The TypeHashCode to use. Returns Type Description ObjectCache An ObjectCache instance."
  },
  "api/Parcel.Serialization.ObjectCache.FromType.html": {
    "href": "api/Parcel.Serialization.ObjectCache.FromType.html",
    "title": "Method FromType | Parcel",
    "keywords": "Method FromType | Improve this Doc View Source FromType(Type) Get or construct an ObjectCache instance from Type type . Declaration public static ObjectCache FromType(Type type) Parameters Type Name Description Type type The type of ObjectCache to get or construct. Returns Type Description ObjectCache An ObjectCache instance."
  },
  "api/Parcel.Serialization.ObjectCache.GetCustomAttribute.html": {
    "href": "api/Parcel.Serialization.ObjectCache.GetCustomAttribute.html",
    "title": "Method GetCustomAttribute | Parcel",
    "keywords": "Method GetCustomAttribute | Improve this Doc View Source GetCustomAttribute<T>() Get an Attribute of this Type, if it exists. Declaration public T GetCustomAttribute<T>() where T : Attribute Returns Type Description T The Attribute instance if it exists; otherwise, null . Type Parameters Name Description T The Type of Attribute to get."
  },
  "api/Parcel.Serialization.ObjectCache.GetCustomAttributes.html": {
    "href": "api/Parcel.Serialization.ObjectCache.GetCustomAttributes.html",
    "title": "Method GetCustomAttributes | Parcel",
    "keywords": "Method GetCustomAttributes | Improve this Doc View Source GetCustomAttributes<T>() Get all Attributes of Type T belonging to this Type, if they exists. Declaration public T[] GetCustomAttributes<T>() where T : Attribute Returns Type Description T[] An array of Attribute instances if they exist; otherwise, null . Type Parameters Name Description T The Type of Attribute to get."
  },
  "api/Parcel.Serialization.ObjectCache.GetEnumerator.html": {
    "href": "api/Parcel.Serialization.ObjectCache.GetEnumerator.html",
    "title": "Method GetEnumerator | Parcel",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<ObjectProperty> GetEnumerator() Returns Type Description IEnumerator < ObjectProperty >"
  },
  "api/Parcel.Serialization.ObjectCache.HashCode.html": {
    "href": "api/Parcel.Serialization.ObjectCache.HashCode.html",
    "title": "Property HashCode | Parcel",
    "keywords": "Property HashCode | Improve this Doc View Source HashCode The TypeHashCode of the Type. Declaration public TypeHashCode HashCode { get; } Property Value Type Description TypeHashCode"
  },
  "api/Parcel.Serialization.ObjectCache.html": {
    "href": "api/Parcel.Serialization.ObjectCache.html",
    "title": "Class ObjectCache | Parcel",
    "keywords": "Class ObjectCache Represents a collection of useful information for serialization purposes about a Type. Inheritance System.Object ObjectCache Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public sealed class ObjectCache : IEnumerable<ObjectProperty> Properties Name Description HashCode The TypeHashCode of the Type. Item[String] Get a ObjectProperty instance using its name. Item[UInt32] Get a ObjectProperty instance using its name hash code. Name The name of the Type. Type The Type this ObjectCache is for. Methods Name Description FromHash(TypeHashCode) Get or construct an ObjectCache instance from a TypeHashCode . FromType(Type) Get or construct an ObjectCache instance from Type type . GetCustomAttribute<T>() Get an Attribute of this Type, if it exists. GetCustomAttributes<T>() Get all Attributes of Type T belonging to this Type, if they exists. GetEnumerator() Extension Methods ObjectCacheExtensions.GetReliability(ObjectCache)"
  },
  "api/Parcel.Serialization.ObjectCache.Item.html": {
    "href": "api/Parcel.Serialization.ObjectCache.Item.html",
    "title": "Property Item | Parcel",
    "keywords": "Property Item | Improve this Doc View Source Item[UInt32] Get a ObjectProperty instance using its name hash code. Declaration public ObjectProperty this[uint propertyHash] { get; } Parameters Type Name Description System.UInt32 propertyHash The name hash code to use. Property Value Type Description ObjectProperty An ObjectProperty instance. | Improve this Doc View Source Item[String] Get a ObjectProperty instance using its name. Declaration public ObjectProperty this[string propertyName] { get; } Parameters Type Name Description System.String propertyName The name to use. Property Value Type Description ObjectProperty An ObjectProperty instance."
  },
  "api/Parcel.Serialization.ObjectCache.Name.html": {
    "href": "api/Parcel.Serialization.ObjectCache.Name.html",
    "title": "Property Name | Parcel",
    "keywords": "Property Name | Improve this Doc View Source Name The name of the Type. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/Parcel.Serialization.ObjectCache.Type.html": {
    "href": "api/Parcel.Serialization.ObjectCache.Type.html",
    "title": "Property Type | Parcel",
    "keywords": "Property Type | Improve this Doc View Source Type The Type this ObjectCache is for. Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Parcel.Serialization.ObjectProperty.GetCustomAttribute.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.GetCustomAttribute.html",
    "title": "Method GetCustomAttribute | Parcel",
    "keywords": "Method GetCustomAttribute | Improve this Doc View Source GetCustomAttribute<T>() Get an Attribute of this Property, if it exists. Declaration public T GetCustomAttribute<T>() where T : Attribute Returns Type Description T The Attribute instance if it exists; otherwise, null . Type Parameters Name Description T The Type of Attribute to get."
  },
  "api/Parcel.Serialization.ObjectProperty.GetCustomAttributes.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.GetCustomAttributes.html",
    "title": "Method GetCustomAttributes | Parcel",
    "keywords": "Method GetCustomAttributes | Improve this Doc View Source GetCustomAttributes<T>() Get all Attributes of Type T belonging to this Property, if they exists. Declaration public T[] GetCustomAttributes<T>() where T : Attribute Returns Type Description T[] An array of Attribute instances if they exist; otherwise, null . Type Parameters Name Description T The Type of Attribute to get."
  },
  "api/Parcel.Serialization.ObjectProperty.GetValue.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.GetValue.html",
    "title": "Method GetValue | Parcel",
    "keywords": "Method GetValue | Improve this Doc View Source GetValue(Object) Call the getter for this ObjectProperty on an object. Declaration public object GetValue(object instance) Parameters Type Name Description System.Object instance The instance of the object to call the getter on. Returns Type Description System.Object The value obtained from the getter."
  },
  "api/Parcel.Serialization.ObjectProperty.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.html",
    "title": "Class ObjectProperty | Parcel",
    "keywords": "Class ObjectProperty Represents a collection of useful information for serialization purposes about a Property. Inheritance System.Object ObjectProperty Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public sealed class ObjectProperty : object Properties Name Description Name The name of this Property. NameHash The hash code of the name of this Property. PropertyInfo The PropertyInfo instance of this Property. Type The Type of this Property. Methods Name Description GetCustomAttribute<T>() Get an Attribute of this Property, if it exists. GetCustomAttributes<T>() Get all Attributes of Type T belonging to this Property, if they exists. GetValue(Object) Call the getter for this ObjectProperty on an object. SetValue(Object, Object) Call the setter for this ObjectProperty on an object. TryCreate(PropertyInfo, out ObjectProperty) Attempts to create an instance of ObjectProperty using property . Extension Methods ObjectPropertiesExtensions.GetReliability(ObjectProperty) ObjectPropertiesExtensions.WillAlwaysSerialize(ObjectProperty)"
  },
  "api/Parcel.Serialization.ObjectProperty.Name.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.Name.html",
    "title": "Property Name | Parcel",
    "keywords": "Property Name | Improve this Doc View Source Name The name of this Property. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/Parcel.Serialization.ObjectProperty.NameHash.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.NameHash.html",
    "title": "Property NameHash | Parcel",
    "keywords": "Property NameHash | Improve this Doc View Source NameHash The hash code of the name of this Property. Declaration public uint NameHash { get; } Property Value Type Description System.UInt32"
  },
  "api/Parcel.Serialization.ObjectProperty.PropertyInfo.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.PropertyInfo.html",
    "title": "Property PropertyInfo | Parcel",
    "keywords": "Property PropertyInfo | Improve this Doc View Source PropertyInfo The PropertyInfo instance of this Property. Declaration public PropertyInfo PropertyInfo { get; } Property Value Type Description PropertyInfo"
  },
  "api/Parcel.Serialization.ObjectProperty.SetValue.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.SetValue.html",
    "title": "Method SetValue | Parcel",
    "keywords": "Method SetValue | Improve this Doc View Source SetValue(Object, Object) Call the setter for this ObjectProperty on an object. Declaration public void SetValue(object instance, object newValue) Parameters Type Name Description System.Object instance The instance of the object to call the setter on. System.Object newValue The value to set the Property to."
  },
  "api/Parcel.Serialization.ObjectProperty.TryCreate.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.TryCreate.html",
    "title": "Method TryCreate | Parcel",
    "keywords": "Method TryCreate | Improve this Doc View Source TryCreate(PropertyInfo, out ObjectProperty) Attempts to create an instance of ObjectProperty using property . Declaration public static bool TryCreate(PropertyInfo property, out ObjectProperty objectProperty) Parameters Type Name Description PropertyInfo property The PropertyInfo to construct an ObjectProperty instance from. ObjectProperty objectProperty The ObjectProperty instance that was created. Returns Type Description System.Boolean true if the ObjectProperty was successfully created; otherwise, false . Remarks ObjectProperty creation will fail if the property does not have both a getter and a setter. It will also fail if the Property has the IgnoreAttribute ."
  },
  "api/Parcel.Serialization.ObjectProperty.Type.html": {
    "href": "api/Parcel.Serialization.ObjectProperty.Type.html",
    "title": "Property Type | Parcel",
    "keywords": "Property Type | Improve this Doc View Source Type The Type of this Property. Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Parcel.Serialization.OptInAttribute.html": {
    "href": "api/Parcel.Serialization.OptInAttribute.html",
    "title": "Class OptInAttribute | Parcel",
    "keywords": "Class OptInAttribute Specifies that during serialization, a class should opt-in members for serialization using the Encode Attribute. Inheritance System.Object OptInAttribute Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public sealed class OptInAttribute : Attribute"
  },
  "api/Parcel.Serialization.OptOutAttribute.html": {
    "href": "api/Parcel.Serialization.OptOutAttribute.html",
    "title": "Class OptOutAttribute | Parcel",
    "keywords": "Class OptOutAttribute Specifies that during serialization, a class should opt-out members from serialization using the Ignore Attribute. Inheritance System.Object OptOutAttribute Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public sealed class OptOutAttribute : Attribute"
  },
  "api/Parcel.Serialization.SerializeAttribute.html": {
    "href": "api/Parcel.Serialization.SerializeAttribute.html",
    "title": "Class SerializeAttribute | Parcel",
    "keywords": "Class SerializeAttribute Specifies that a member of a class should be encoded during serialization. Inheritance System.Object SerializeAttribute Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public class SerializeAttribute : Attribute Remarks During serialization, only members whose values have changed since the previous serialization will be serialized. If you wish for a member to always be serialized, use the AlwaysEncode attribute."
  },
  "api/Parcel.Serialization.Serializer.CanSerialize.html": {
    "href": "api/Parcel.Serialization.Serializer.CanSerialize.html",
    "title": "Method CanSerialize | Parcel",
    "keywords": "Method CanSerialize | Improve this Doc View Source CanSerialize(Type) Checks if a type is able to be serialized using this Serializer. Declaration public abstract bool CanSerialize(Type type) Parameters Type Name Description Type type The type to check. Returns Type Description System.Boolean true if the Type can be serialized; otherwise, false ."
  },
  "api/Parcel.Serialization.Serializer.Clone.html": {
    "href": "api/Parcel.Serialization.Serializer.Clone.html",
    "title": "Method Clone | Parcel",
    "keywords": "Method Clone | Improve this Doc View Source Clone() Clone this serializer. Declaration public object Clone() Returns Type Description System.Object A Memberwise clone of this serializer."
  },
  "api/Parcel.Serialization.Serializer.Deserialize.html": {
    "href": "api/Parcel.Serialization.Serializer.Deserialize.html",
    "title": "Method Deserialize | Parcel",
    "keywords": "Method Deserialize | Improve this Doc View Source Deserialize(ByteReader) Deserialize an object. Declaration public abstract object Deserialize(ByteReader reader) Parameters Type Name Description ByteReader reader The ByteReader to read the object from. Returns Type Description System.Object The object that was deserialized."
  },
  "api/Parcel.Serialization.Serializer.html": {
    "href": "api/Parcel.Serialization.Serializer.html",
    "title": "Class Serializer | Parcel",
    "keywords": "Class Serializer Base class for all Serializers. Inheritance System.Object Serializer Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public abstract class Serializer : ICloneable Remarks Serializers are responsible for converting objects into binary representations as well as converting binary representations back into objects. Properties Name Description ObjectCache The ObjectCache associated with this serializer. Methods Name Description CanSerialize(Type) Checks if a type is able to be serialized using this Serializer. Clone() Clone this serializer. Deserialize(ByteReader) Deserialize an object. Serialize(ByteWriter, Object) Serialize an object."
  },
  "api/Parcel.Serialization.Serializer.ObjectCache.html": {
    "href": "api/Parcel.Serialization.Serializer.ObjectCache.html",
    "title": "Property ObjectCache | Parcel",
    "keywords": "Property ObjectCache | Improve this Doc View Source ObjectCache The ObjectCache associated with this serializer. Declaration public ObjectCache ObjectCache { get; } Property Value Type Description ObjectCache"
  },
  "api/Parcel.Serialization.Serializer.Serialize.html": {
    "href": "api/Parcel.Serialization.Serializer.Serialize.html",
    "title": "Method Serialize | Parcel",
    "keywords": "Method Serialize | Improve this Doc View Source Serialize(ByteWriter, Object) Serialize an object. Declaration public abstract void Serialize(ByteWriter writer, object obj) Parameters Type Name Description ByteWriter writer The ByteWriter the object is written to. System.Object obj The object being serialized."
  },
  "api/Parcel.Serialization.SerializerResolver.-ctor.html": {
    "href": "api/Parcel.Serialization.SerializerResolver.-ctor.html",
    "title": "Constructor SerializerResolver | Parcel",
    "keywords": "Constructor SerializerResolver | Improve this Doc View Source SerializerResolver() Construct a new instance of SerializerResolver. Declaration public SerializerResolver()"
  },
  "api/Parcel.Serialization.SerializerResolver.GetSerializer.html": {
    "href": "api/Parcel.Serialization.SerializerResolver.GetSerializer.html",
    "title": "Method GetSerializer | Parcel",
    "keywords": "Method GetSerializer | Improve this Doc View Source GetSerializer(Type) Get or Resolve the Serializer to use with Type type . Declaration public Serializer GetSerializer(Type type) Parameters Type Name Description Type type The Type to get or resolve a Serializer for. Returns Type Description Serializer The appropriate Serializer ."
  },
  "api/Parcel.Serialization.SerializerResolver.Global.html": {
    "href": "api/Parcel.Serialization.SerializerResolver.Global.html",
    "title": "Property Global | Parcel",
    "keywords": "Property Global | Improve this Doc View Source Global A global default instance of SerializerResolver that can be fallen back upon. Declaration public static SerializerResolver Global { get; } Property Value Type Description SerializerResolver"
  },
  "api/Parcel.Serialization.SerializerResolver.html": {
    "href": "api/Parcel.Serialization.SerializerResolver.html",
    "title": "Class SerializerResolver | Parcel",
    "keywords": "Class SerializerResolver Stored a collection of Serializers and resolves which Serializers should be used for each Type. Inheritance System.Object SerializerResolver Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public class SerializerResolver : object Remarks Serializers that are registered with the SerializerResolver class will be stored. When an unseen type attempts to serialize, the SerializerResolver will check each registered Serializer and find the first one to return true from the CanSerialize(Type) call. This Serializer will be cloned and the appropriate ObjectCache instance will be placed into the Serializer . Constructors Name Description SerializerResolver() Construct a new instance of SerializerResolver. Properties Name Description Global A global default instance of SerializerResolver that can be fallen back upon. Methods Name Description GetSerializer(Type) Get or Resolve the Serializer to use with Type type . RegisterSerializer(Serializer) Register a Serializer with this SerializerResolver. UnRegisterSerializer(Serializer) Unregister a Serializer with this SerializerResolver."
  },
  "api/Parcel.Serialization.SerializerResolver.RegisterSerializer.html": {
    "href": "api/Parcel.Serialization.SerializerResolver.RegisterSerializer.html",
    "title": "Method RegisterSerializer | Parcel",
    "keywords": "Method RegisterSerializer | Improve this Doc View Source RegisterSerializer(Serializer) Register a Serializer with this SerializerResolver. Declaration public void RegisterSerializer(Serializer serializer) Parameters Type Name Description Serializer serializer The Serializer to register."
  },
  "api/Parcel.Serialization.SerializerResolver.UnRegisterSerializer.html": {
    "href": "api/Parcel.Serialization.SerializerResolver.UnRegisterSerializer.html",
    "title": "Method UnRegisterSerializer | Parcel",
    "keywords": "Method UnRegisterSerializer | Improve this Doc View Source UnRegisterSerializer(Serializer) Unregister a Serializer with this SerializerResolver. Declaration public void UnRegisterSerializer(Serializer serializer) Parameters Type Name Description Serializer serializer The Serializer to unregister."
  },
  "api/Parcel.Serialization.TypeHashCode.ArrayRank.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.ArrayRank.html",
    "title": "Property ArrayRank | Parcel",
    "keywords": "Property ArrayRank | Improve this Doc View Source ArrayRank Get the rank of the array if the Type is an array. Declaration public int ArrayRank { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.Serialization.TypeHashCode.Equals.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.Equals.html",
    "title": "Method Equals | Parcel",
    "keywords": "Method Equals | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean"
  },
  "api/Parcel.Serialization.TypeHashCode.GenericArgumentCount.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.GenericArgumentCount.html",
    "title": "Property GenericArgumentCount | Parcel",
    "keywords": "Property GenericArgumentCount | Improve this Doc View Source GenericArgumentCount Get the number of generic arguments. Declaration public int GenericArgumentCount { get; } Property Value Type Description System.Int32"
  },
  "api/Parcel.Serialization.TypeHashCode.GetEnumerator.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.GetEnumerator.html",
    "title": "Method GetEnumerator | Parcel",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<TypeHashCode> GetEnumerator() Returns Type Description IEnumerator < TypeHashCode >"
  },
  "api/Parcel.Serialization.TypeHashCode.GetHashCode.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.GetHashCode.html",
    "title": "Method GetHashCode | Parcel",
    "keywords": "Method GetHashCode | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32"
  },
  "api/Parcel.Serialization.TypeHashCode.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.html",
    "title": "Class TypeHashCode | Parcel",
    "keywords": "Class TypeHashCode Represents a reversible hashcode for Types. Inheritance System.Object TypeHashCode Namespace : Parcel.Serialization Assembly : ParcelPacketManager.dll Syntax public class TypeHashCode : IEnumerable<TypeHashCode> Properties Name Description ArrayRank Get the rank of the array if the Type is an array. GenericArgumentCount Get the number of generic arguments. IsArrayType Whether this type is an array or not. IsGenericType Whether this type is generic or not. Item[Int32] Get the generic argument at index . Methods Name Description Equals(Object) GetEnumerator() GetHashCode() ParseType(TypeHashCode) Parse the Type from a TypeHashCode . Operators Name Description Explicit(TypeHashCode to UInt64) Convert a TypeHashCode into its ulong representation."
  },
  "api/Parcel.Serialization.TypeHashCode.IsArrayType.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.IsArrayType.html",
    "title": "Property IsArrayType | Parcel",
    "keywords": "Property IsArrayType | Improve this Doc View Source IsArrayType Whether this type is an array or not. Declaration public bool IsArrayType { get; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Serialization.TypeHashCode.IsGenericType.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.IsGenericType.html",
    "title": "Property IsGenericType | Parcel",
    "keywords": "Property IsGenericType | Improve this Doc View Source IsGenericType Whether this type is generic or not. Declaration public bool IsGenericType { get; } Property Value Type Description System.Boolean"
  },
  "api/Parcel.Serialization.TypeHashCode.Item.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.Item.html",
    "title": "Property Item | Parcel",
    "keywords": "Property Item | Improve this Doc View Source Item[Int32] Get the generic argument at index . Declaration public TypeHashCode this[int index] { get; } Parameters Type Name Description System.Int32 index The index of the generic argument. Property Value Type Description TypeHashCode A TypeHashCode instance."
  },
  "api/Parcel.Serialization.TypeHashCode.op_Explicit.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.op_Explicit.html",
    "title": "Operator Explicit | Parcel",
    "keywords": "Operator Explicit | Improve this Doc View Source Explicit(TypeHashCode to UInt64) Convert a TypeHashCode into its ulong representation. Declaration public static explicit operator ulong (TypeHashCode typeHashCode) Parameters Type Name Description TypeHashCode typeHashCode The TypeHashCode to convert. Returns Type Description System.UInt64"
  },
  "api/Parcel.Serialization.TypeHashCode.ParseType.html": {
    "href": "api/Parcel.Serialization.TypeHashCode.ParseType.html",
    "title": "Method ParseType | Parcel",
    "keywords": "Method ParseType | Improve this Doc View Source ParseType(TypeHashCode) Parse the Type from a TypeHashCode . Declaration public static Type ParseType(TypeHashCode typeHashCode) Parameters Type Name Description TypeHashCode typeHashCode The TypeHashCode to parse. Returns Type Description Type The Type that was parsed."
  },
  "api/Parcel.ServerDisconnectionBehavior.html": {
    "href": "api/Parcel.ServerDisconnectionBehavior.html",
    "title": "Enum ServerDisconnectionBehavior | Parcel",
    "keywords": "Enum ServerDisconnectionBehavior Represents the behavior for handling SyncedObjects a server should perform when a user disconnects. Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public enum ServerDisconnectionBehavior : int Fields Name Description DestroySyncedObjects Indicates that a server should destroy a user's SyncedObjects when they disconnect. PreserveSyncedObjects Indicates that a server should preserve a user's SyncedObjects when they disconnect."
  },
  "api/Parcel.UnreliableAttribute.html": {
    "href": "api/Parcel.UnreliableAttribute.html",
    "title": "Class UnreliableAttribute | Parcel",
    "keywords": "Class UnreliableAttribute Specifies that a Packet or property within a SyncedObject is considered unreliable. Inheritance System.Object UnreliableAttribute Namespace : Parcel Assembly : ParcelPacketManager.dll Syntax public sealed class UnreliableAttribute : Attribute Remarks When a packet or property is unreliable, this indicates that the packet or property is not guaranteed to be received by remote users."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Parcel Packet Manager | Parcel",
    "keywords": "h1.title { text-align: center; font-size: 3rem; } img.icon { display:block; margin: auto; } h3 { font-size: 1.5rem; } Parcel Packet Manager Introduction Parcel Packet Manager is a lightweight library that simplifies networking. Parcel was designed primarily with video games in mind but can be applicable in non-video game contexts. Please read through the other articles to gain a full understanding of how to utilize Parcel. Note: Parcel is still under active development and these articles are bound to change. Please suggest any improvements you might like to see or let me know of anything that seems confusing or poorly explained."
  },
  "articles/packets.html": {
    "href": "articles/packets.html",
    "title": "Packets | Parcel",
    "keywords": "h1.title { text-align: center; font-size: 3rem; } h3 { font-size: 1.5rem; } Packets In Parcel, Packets are standard c# object that inherit from the Packet class. Packets can contain any type of data from primitives to complex objects. It is recommended to keep most Packets lightweight, especially those that are sent very often. Defining a Packet When defining a Packet in your project, you should create a new class that extends from the Packet class. It is highly recommended that you implement a default parameterless constructor into your Packet on top of any other constructors you create, especially if your Packet has fields that need to be initialized in the constructor. Packets lacking a default parameterless constructor will still be constructed, however, their behavior is not predictable and a Warning will be thrown when one is created. public class MyPacket : Packet { public MyPacket() { } } Serialization The data within a packet that you wish to have sent must be in the form of a c# Property with a getter and a setter. Fields will not be serialized. example: public string MyProperty { get; set; } By default, properties will be serialized when a packet is sent. If you wish for a property to not be sent, you can add the Ignore attribute to the property. [Ignore] public string MyProperty { get; set; } You can also flip the default behavior of the serializer so that properties need to be explicitly marked for serialization using the OptIn attribute on the Packet itself and the Serialize attribute on the property. [OptIn] public class MyPacket : Packet { [Serialize] public string MyProperty { get; set;} } Included Properties Packets contain five included properties that are in place to support any logic that could be included in the Packet. These properties do not serialize with each Packet. Peer Sender - The Peer that sent this Packet. IsServer - Whether this Packet was received by a server or client. IsClient - Whether this Packet was received by a client or server. Client - The ParcelClient that received this Packet. Null if IsClient is false. Server - The ParcelServer that received this Packet. Null if IsServer is false. Virtual Methods Packets also provide a few virtual methods that you can override to add logic to your packets. bool CanSend() - Allows for logic to be performed before serialization to determine if the Packet should be sent. Return true to send this Packet. void OnSend() - Allows for logic to be performed shortly before serialization. This is only called if CanSend returned true. void OnReceive() - Allows for logic to be performed shortly after deserialization. A Note of thread-safety: By default, these methods are called from a worker thread. Ensure any code you write within these methods is thread-safe. If you want these methods to be called on a thread of your choosing, there is a option available in the ParcelSettings class that disables automatic updates for the client or server. Built-in Packet Types There are two additional built-in Packet types for you to use. These Packets simply enforce sending a Packet in a single direction. ServerToClientPacket - A Packet that can only travel from a Server to a Client. ClientToServerPacket - A Packet that can only travel from a Client to a Server. If you wish to implement your own logic in the CanSend() virtual method within these Packets, ensure you call base.CanSend() or they will lose their functionality. protected override void CanSend() { return base.CanSend() && MyCondition; } Example An example of a Packet that performs a weapon firing action on the server: public sealed class FireWeaponPacket : ClientToServerPacket { public Vector3 Ray { get; private set; } public string WeaponID { get; private set; } public FireWeaponPacket() { } public FireWeaponPacket(Vector3 ray, string weaponID) { this.Ray = ray; this.WeaponID = weaponID; } protected override void OnReceive() { if (WeaponsManifest.TryGetWeapon(this.WeaponID, out Weapon weapon)) { if (World.PerformHitscan(this.Ray, out Entity hit)) { hit.Damage(weapon); } } } }"
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Getting Started | Parcel",
    "keywords": "h1.title { text-align: center; font-size: 3rem; } h3 { font-size: 1.5rem; } Getting Started Installation Coming soon... Creating a Peer Before initializing a client or server, a Peer object must be created. Peers contain a GUID, which is typically assigned by the server and used to uniquely identify Peers, even if they originate from the same network. Peers also hold onto the IP address and the Port of a user, as well as any read-only information (called properties) you decide to include with the peer. Examples of this might be a person's username. If you desire to have non-read-only properties for a Peer, consider creating a SyncedObject owned by that Peer that is specific to your use-case. Peers are constructed using the PeerBuilder class. The PeerBuilder class has the following options: UsePublicAddress() - Set the address of the Peer being built to your network's public IP address. SetAddress(string address) - Set the address of the Peer being built. SetPort(int port) - Set the port of the Peer being built. AddProperty(string key, object value) - Add a property to the Peer being built. SetProperties(Dictionary<string, object> properties) - Set all the properties of the Peer being built. NOTE: If you are hosting both a client and server within the same application, you will need to create two Peers and ensure their ports are not the same. Peer clientPeer = new PeerBuilder() .UsePublicAddress() .SetPort(7777) .AddProperty(\"username\", \"MyUsername\"); Peer serverPeer = new PeerBuilder() .UsePublicAddress() .SetPort(7778); Settings After creating a Peer, the final step before creating a client or server is to create a ParcelSettings object. The ParcelSettings object holds settings to be utilized by a client or server. ParcelSettings objects can only be used by a single client or server, and will be bound to that instance, so if you are hosting a server and a client on the same application, you will need to create two ParcelSettings objects. ParcelSettings are constructed using the ParcelSettingsBuilder class. The ParcelSettingsBuilder class has the following options: SetPeer(Peer peer) - Set the Peer for the client or server to use. SetNetworkAdapter () - Set the network adapter for the client or server to use. SetConnectionTimeout(int milliseconds) - Set the amount of time allowed for connection events to occur within. If time is exceeded, a connection event fails. SetDisconnectionTimeout(int milliseconds) - Set the amount of time allowed since last receiving a packet from a user before they are considered disconnected. SetUpdatesPerSecond(int updates) - Set the number of iterations of a client or server's main loop that will be performed per second. PerformUpdatesAutomatically(bool should) - Set whether a client or server should automatically or manually perform updates. SetUnreliablePacketGroupSize(int groupSize) - Set the number unreliable packets that will be grouped together during serialization. SetReliablePacketGroupSize(int groupSize) - Set the number of reliable packets that will be grouped together during serialization. AddNetworkDebugger(NetworkDebugger debugger) - Attached a NetworkDebugger to the client or server. ParcelSettings clientSettings = new ParcelSettingsBuilder() .SetPeer(clientPeer) .SetNetworkAdapter<UdpNetworkAdapter>() .SetConnectionTimeout(5000) .SetDisconnectionTimeout(7500) .SetUpdatesPerSecond(20) .SetUnreliablePacketGroupSize(5) .SetReliablePacketGroupSize(10); ParcelSettings serverSettings = new ParcelSettingsBuilder() .SetPeer(serverPeer) .SetNetworkAdapter<UdpNetworkAdapter>() .SetConnectionTimeout(5000) .SetDisconnectionTimeout(7500) .SetUpdatesPerSecond(60) .SetUnreliablePacketGroupSize(3) .SetReliablePacketGroupSize(10); (Optional) Attaching a NetworkDebugger It may be beneficial while working on your project to attach a NetworkDebugger to your client and server. By design, all exceptions that occur during serialization or within any virtual methods of a Packet or SyncedObject will be caught and handled, to prevent your client or server for quitting upon an exception. This safety feature can make it hard to diagnose issues. Attaching a debugger will allow you to log any exceptions encountered. NetworkDebugger debugger = new NetworkDebugger(new ConsoleLogger()); //Then, when creating your ParcelSettings call: .AddNetworkDebugger(debugger) Creating a Client Finally, with a ParcelSettings object created, a new ParcelClient can be initialized. The ParcelClient class is responsible for establishing connections, send and receiving Packets, and managing SyncedObjects. It is recommended that you store you client(s) in some singleton object within your project. Alternatively, you can pass your ParcelClient object to places that need it if you want to avoid the singleton pattern. ParcelClient client = new ParcelClient(clientSettings); Connecting to a server To establish a connection with a server, a ConnectionToken is required. A ConnectionToken contains the Address and Port of the server to connect to. Connections are performed asynchronously and should be awaited. They will return a ConnectionResult struct that will contain a status, the server's Peer object, or any rejection reasons should the connection be rejected by the server. //Create the connection token ConnectionToken serverToken = new ConnectionToken(\"IP of Server\", 7778); //Await the connection ConnectionResult results = await client.ConnectTo(serverToken); //Read the results ConnectionStatus status = results.Status; Peer serverPeer = results.RemotePeer; string[] rejectionReasons = results.RejectionReasons; There is also an event that is invoked upon a successful connection. client.OnConnected += (Peer server) => { your logic here }; Disconnecting from a server Disconnecting from a server is incredibly simple. Call Disconnect will perform a final disconnection handshake. This can take a few iterations of the network loop, so it is recommended that you prevent your application from closing at least until the disconnection has been completed. //To disconnect from the server client.Disconnect(); A good way to ensure the disconnection handshake has been completed is to listen for a disconnection event, which will be invoked when the connection is fully closed. It will also invoke in the event of a forced disconnection or timeout. //To listen for a disconnection event client.OnDisconnected += (Peer server, DisconnectionReason reason, string message) => { your logic here }; Sending Packets Sending Packets to the server is also incredibly simple. There is also an overload that allows for you to send a Packet to another Peer connected to the server. //Sending to the server client.Send(myPacket); //Sending to another Peer client.Send(myPacket, otherPeer); Synced Objects SyncedObjects are a topic complex enough to warrant their own article. Please check out that article for more information. Remote Procedure Calls Remote procedure calls have not been implemented yet. This article will be updated when they are implemented to reflect how they work. Creating a Server Creating a server is the same as creating a client, instead using the ParcelServer class. ParcelServer server = new ParcelServer(serverSettings); Handling Connections Servers cannot make connections, instead a connection must be made to them. Servers can listen for connections and perform logic when a connection event occurs. server.OnRemoteConnected += (Peer client) => { your logic here }; Servers can also intercept connections before they are fully connected and optionally reject the connection. Each subscription to this event should return an InitialConnectionResult struct with either a true or false value and a message. The results of all subscriptions will be merged and if any result is false, the connection will be rejected. All false messages will be sent to the client being rejected. server.OnInitialConnection += (Peer connecting) => { return new InitialConnectionResult(false, \"You are not allowed to join this server!\"); }; Handling Disconnections Servers can force disconnect users that are connected to them. server.ForceDisconnect(peer); Servers can also listen for disconnection events and act accordingly. server.OnRemoteDisconnection += (Peer client, DisconnectionReason reason, string message) => { your logic here }; Sending Packets Sending Packets to clients is simple. The base Send method will send a Packet to all connected Peers. There is an overload that allows for a Packet to be sent to a group of specified Peers. //Sending to all Peers server.Send(myPacket); //Sending to specific Peers server.Send(myPacket, peer1, peer2, peer3, etc...); Synced Objects SyncedObjects are a topic complex enough to warrant their own article. Please check out that article for more information. Remote Procedure Calls Remote procedure calls have not been implemented yet. This article will be updated when they are implemented to reflect how they work. Complete Code Client Peer clientPeer = new PeerBuilder() .UsePublicAddress() .SetPort(7777) .AddProperty(\"username\", \"MyUsername\"); ParcelSettings clientSettings = new ParcelSettingsBuilder() .SetPeer(clientPeer) .SetNetworkAdapter<UdpNetworkAdapter>() .SetConnectionTimeout(5000) .SetDisconnectionTimeout(7500) .SetUpdatesPerSecond(20) .SetUnreliablePacketGroupSize(5) .SetReliablePacketGroupSize(10); ParcelClient client = new ParcelClient(clientSettings); ConnectionToken serverToken = new ConnectionToken(\"IP of Server\", 7778); bool success = await client.ConnectTo(serverToken); Server Peer serverPeer = new PeerBuilder() .UsePublicAddress() .SetPort(7778); ParcelSettings serverSettings = new ParcelSettingsBuilder() .SetPeer(serverPeer) .SetNetworkAdapter<UdpNetworkAdapter>() .SetConnectionTimeout(5000) .SetDisconnectionTimeout(7500) .SetUpdatesPerSecond(60) .SetUnreliablePacketGroupSize(3) .SetReliablePacketGroupSize(10); ParcelServer server = new ParcelServer(clientSettings);"
  },
  "articles/serializers.html": {
    "href": "articles/serializers.html",
    "title": "Custom Serializers | Parcel",
    "keywords": "h1.title { text-align: center; font-size: 3rem; } h3 { font-size: 1.5rem; } Custom Serializers Coming soon..."
  },
  "articles/syncedobjects.html": {
    "href": "articles/syncedobjects.html",
    "title": "Synced Objects | Parcel",
    "keywords": "h1.title { text-align: center; font-size: 3rem; } h3 { font-size: 1.5rem; } Synced Objects In Parcel, Synced Objects are standard c# object that inherit from the SyncedObject class. SyncedObjects are Packets that will automatically or manually (depending on preference) keep their Properties in sync between multiple clients and the server. Servers can additionally enforce verification rules on properties to further increase server-side safety. Synced Objects follow a subscription based model where only Peers that are subscribed to a Synced Object will have access to their data. Each SyncedObject will also have an Owner, who is automatically subscribed to the Synced Object and is the only individual (aside from the server itself) that can make changes to that Synced Object. Defining a Synced Object When defining a Synced Object in your project, you should create a new class that extends from the SyncedObject class. In the current version of Parcel, Synced Objects must have a default parameterless constructor. They also cannot be constructed using their constructor. This will change in a future version and the Synced Object creation workflow will change as well. public class MySyncedObject : SyncedObject { public MySyncedObject() { } } Serialization The data within a Synced Object that you wish to have synchronized must be in the form of a c# Property with a getter and a setter. Fields will not be serialized. example: public string MyProperty { get; set; } By default, properties will only be serialized when their value changes. To keep track of these changes, Synced Objects have two options avaliable to them. The first is automated synchronization. This is accomplished by patching the setter method of any serializable property within a Synced Object. To enable automated synchronization, run the following code at the startup on your project. SyncedObjectPatcher.Patch(); If you choose not to use automated synchronization, you can also use manual synchronization. To do this, you need to add a call to the SyncProperty() method in the setters of any properties you want to synchronize. private string _myProperty; public string MyProperty { get => this._myProperty; set { this._myProperty = value; SyncProperty(); } } There is also an option to force a property to be serialized even if it didn't change any time the Synced Object would be serialized. This can be done by applying the AlwaysSerialize attribute to the property. [AlwaysSerialize] public string MyProperty { get; set; } If you wish for a property to not be serialized under any condition, you can add the Ignore attribute to the property. [Ignore] public string MyProperty { get; set; } You can also flip the default behavior of the serializer so that properties need to be explicitly marked for serialization using the OptIn attribute on the Synced Object itself and the Serialize attribute on the property. [OptIn] public class MySyncedObject : SyncedObject { [Serialize] public string MyProperty { get; set;} } Included Properties Synced Objects contain seven included properties that are in place to support any logic that could be included in the Packet. These properties do not serialize with each Packet. SyncedObjectID ID - The ID of this Synced Object. Peer Owner - The Peer that owns this Synced Object. Peer Sender - The Peer that last sent changes for this Synced Object. (this will only ever be the server on clients and the owner on servers). IsServer - Whether this Synced Object is a server or client instance. IsClient - Whether this Synced Object is a client or server instance. Client - The ParcelClient that this Synced Object is associated to. Null if IsClient is false. Server - The ParcelServer that this Synced Object is associated to. Null if IsServer is false. Virtual Methods Synced Objects also provide virtual methods that you can override to add logic to your objects. bool CanSend() - Allows for logic to be performed before serialization to determine if the Synced Object should be synchronized. Return true to send perform synchronization. void OnSend() - Allows for logic to be performed shortly before serialization. This is only called if CanSend returned true. void OnReceive() - Allows for logic to be performed shortly after deserialization. void OnCreated() - Allows for logic to be performed shortly after the Synced Object is created on both the client and server. void OnDestroyed() - Allows for logic to be performed immediately after the Synced Object is destroyed on both the client and the server. void OnOwnerChange(Peer previousOwner, Peer newOwner) - Allows for logic to be performed when the owner of a Synced Object changes. void OnPropertiesChanged(Dictionary<string, PropertyChanges> changes) - Allows for logic to be performed when any property within the Synced Object is updated on the client or server. Creating a Synced Object As stated before, the creation workflow for a Synced Object will be changing in a future version. For now, the process is fairly simple but limited. Synced Objects can only be created on the server. //Non-Generic overload MySyncedObject mso = (MySyncedObject)myServer.CreateSyncedObject(typeof(MySyncedObject), owner); //Generic overload MySyncedObject mso = myServer.CreateSyncedObject<MySyncedObject>(owner); Server Methods The ParcelServer class contains some methods designed to support Synced Objects. SyncedObject CreateSyncedObject(Type type, Peer owner) - Creates a new Synced Object using the type provided. T CreateSyncedObject (Peer owner) - Creates a new Synced Object using the generic type provided. bool DestroySyncedObject(SyncedObjectID syncedObjectID) - Destroys a Synced Object with a matching ID. Returns true if successful or false if unsuccessful. bool TryGetSyncedObject(SyncedObjectID syncedObjectID, out SyncedObject syncedObject) - Attempts to get an instance of a Synced Object with a matching ID. Returns true if successful or false if unsuccessful. bool TryGetSyncedObject (SyncedObjectID syncedObjectID, out T syncedObject) - Attempts to get an instance of a Synced Object with the provided type and a matching ID. Returns true if successful or false if unsuccessful. bool TryGetSyncedObjectSubscribers(SyncedObjectID syncedObjectID, out Peer[] subscribers) - Attempts to get an array of Peers subscribed to the Synced Object with a matching ID. Returns true if successful or false if unsuccessful. bool TryTransferSyncedObjectOwnership(SyncedObjectID syncedObjectID, Peer newOwner) - Attempts to transfer ownership of a Synced Object with a matching ID to a new Peer. Returns true if successful or false if unsuccessful. bool AddSyncedObjectSubscriptions(SyncedObjectID syncedObjectID, params Peer[] subscribers) - Adds Peers to the subscription list of a Synced Object with a matching ID. Returns true if successful or false if unsuccessful. bool RemoveSyncedObjectSubscriptions(SyncedObjectID syncedObjectID, params Peer[] subscribers) - Removes Peers from the subscriptions list of a Synced Object with a matching ID. Returns true if successful or false if unsuccessful. Client Methods The ParcelClient class also provides some methods supporting Synced Object. bool TryGetSyncedObject(SyncedObjectID syncedObjectID, out SyncedObject syncedObject) - Attempts to get an instance of a Synced Object with a matching ID. Returns true if successful or false if unsuccessful. bool TryGetSyncedObject (SyncedObjectID syncedObjectID, out T syncedObject) - Attempts to get an instance of a Synced Object with the provided type and a matching ID. Returns true if successful or false if unsuccessful. Shortcuts Synced Objects also contain shortcuts for a few of the server methods listed above. These include the following. void UpdateOwner(Peer newOwner) - Transfers the ownership of the Synced Object to another Peer. void AddSubscriptions(params Peer[] subscribers) - Add subscribers to this Synced Object's subscribers list. Peer[] GetSubscriptions() - Get an array of Peers who are subscribed to this Synced Object. void RemoveSubscriptions(params Peer[] subscribers) - Remove subscribers from this Synced Objects's subscribers list. Example public class Player : SyncedObject { public int Health { get; set; } public Player() { } private void Kill() { this.Server.DestroySyncedObject(this.ID); } protected override void OnCreated() { if (this.IsClient) { World.RegisterPlayer(this); } } protected override void OnDestroyed() { if (this.IsClient) { World.UnregisterPlayer(this); } } protected override void OnRecieved() { if (this.IsServer && this.Health <= 0) { Kill(); } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Parcel Packet Manager | Parcel",
    "keywords": "h1.title { text-align: center; font-size: 3rem; } img.icon { display:block; margin: auto; } h3 { font-size: 1.5rem; } Parcel Packet Manager Introduction Parcel Packet Manager is a lightweight library that simplifies networking. Parcel was designed primarily with video games in mind but can be applicable in non-video game contexts. Please read through the all the articles to gain a full understanding of how to utilize Parcel. Note: Parcel is still under active development and the articles are bound to change. Please suggest any improvements you might like to see or let me know of anything that seems confusing or poorly explained."
  }
}